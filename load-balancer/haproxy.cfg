# Enterprise HAProxy Load Balancer Configuration
# Designed for 100M+ requests per minute
# Includes: Rate limiting, SSL termination, health checks, monitoring

global
    # Performance tuning
    maxconn 100000
    nbproc 4
    nbthread 8
    cpu-map auto:1/1-8 0-7
    
    # Logging
    log /dev/log local0
    log /dev/log local1 notice
    
    # Security
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon
    
    # SSL
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-ssl-options no-sslv3 no-tlsv10 no-tlsv11
    
    # Stats
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    
    # Timeouts
    timeout connect 5s
    timeout client 50s
    timeout server 50s
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout queue 30s
    timeout tunnel 1h
    timeout client-fin 30s
    timeout server-fin 30s
    
    # Retries
    retries 3
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json application/xml

# Rate limiting
frontend rate_limit
    bind *:80
    mode http
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10000 }
    
    # Redirect to HTTPS
    redirect scheme https code 301

# Main HTTPS frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/private/yourdomain.com.pem
    mode http
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;"
    
    # Rate limiting for different endpoints
    acl is_api path_beg /api/
    acl is_login path_beg /api/auth/
    acl is_upload path_beg /api/upload/
    
    # Apply rate limits
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    
    # API rate limiting
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 5000 } is_api
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 } is_login
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 1000 } is_upload
    
    # Route to appropriate backend
    use_backend api_backend if is_api
    use_backend static_backend if { path_end .js .css .png .jpg .jpeg .gif .ico .svg .woff .woff2 .ttf .eot }
    default_backend frontend_backend

# WebSocket frontend
frontend websocket_frontend
    bind *:8080 ssl crt /etc/ssl/private/yourdomain.com.pem
    mode http
    
    # WebSocket upgrade
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws
    
    use_backend websocket_backend if is_websocket
    default_backend websocket_backend

# API backend cluster
backend api_backend
    mode http
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    # Health check
    option httpchk
    http-check expect status 200
    
    # Session persistence
    cookie SRVID insert indirect nocache
    
    # Servers
    server api1 31.97.70.79:5050 check weight 100 maxconn 1000 cookie api1
    server api2 31.97.70.80:5050 check weight 100 maxconn 1000 cookie api2
    server api3 31.97.70.81:5050 check weight 100 maxconn 1000 cookie api3
    server api4 31.97.70.82:5050 check weight 50 maxconn 500 cookie api4 backup
    server api5 31.97.70.83:5050 check weight 50 maxconn 500 cookie api5 backup
    
    # Timeouts
    timeout connect 5s
    timeout server 60s
    
    # Retries
    retry-on all-retryable-errors
    retries 3

# WebSocket backend cluster
backend websocket_backend
    mode http
    balance leastconn
    option httpchk GET /health
    
    # WebSocket specific
    option forceclose
    option http-server-close
    
    # Servers
    server ws1 31.97.70.79:5050 check weight 100 maxconn 2000
    server ws2 31.97.70.80:5050 check weight 100 maxconn 2000
    server ws3 31.97.70.81:5050 check weight 100 maxconn 2000
    
    # Timeouts for WebSocket
    timeout connect 5s
    timeout server 7d

# Frontend static files backend
backend frontend_backend
    mode http
    balance roundrobin
    
    # Static file server
    server static1 31.97.70.90:80 check weight 100 maxconn 1000
    server static2 31.97.70.91:80 check weight 100 maxconn 1000

# Static files backend
backend static_backend
    mode http
    balance roundrobin
    
    # CDN or static file servers
    server static1 31.97.70.90:80 check weight 100 maxconn 2000
    server static2 31.97.70.91:80 check weight 100 maxconn 2000
    
    # Caching headers
    http-response set-header Cache-Control "public, max-age=31536000" if { path_end .js .css .png .jpg .jpeg .gif .ico .svg .woff .woff2 .ttf .eot }

# Database load balancing
listen db_cluster
    mode tcp
    bind *:5432
    balance leastconn
    
    # Health check
    option tcp-check
    
    # Servers
    server db1 31.97.70.87:5432 check weight 100 maxconn 500
    server db2 31.97.70.88:5432 check weight 100 maxconn 500
    server db3 31.97.70.89:5432 check weight 100 maxconn 500

# Redis cluster load balancing
listen redis_cluster
    mode tcp
    bind *:6379
    balance leastconn
    
    # Health check
    option tcp-check
    
    # Servers
    server redis1 31.97.70.84:6379 check weight 100 maxconn 1000
    server redis2 31.97.70.85:6379 check weight 100 maxconn 1000
    server redis3 31.97.70.86:6379 check weight 100 maxconn 1000

# Stats and monitoring
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats show-legends
    stats show-node 