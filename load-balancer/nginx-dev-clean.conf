# Clean Development NGINX Configuration
# Designed for local development on 192.168.0.105

user www-data;
worker_processes auto;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance tuning
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css text/javascript application/json application/javascript;
    
    # Upstream backend servers
    upstream backend_cluster {
        server 192.168.0.105:5000 max_fails=3 fail_timeout=30s weight=100;  # Real backend
        server 192.168.0.105:5051 max_fails=3 fail_timeout=30s weight=50;   # Test backend 1
        server 192.168.0.105:5052 max_fails=3 fail_timeout=30s weight=50;   # Test backend 2
        server 192.168.0.106:5000 max_fails=3 fail_timeout=30s weight=100;
        server 192.168.0.107:5000 max_fails=3 fail_timeout=30s weight=100;
    }

    # WebSocket upstream
    upstream websocket_cluster {
        server 192.168.0.105:5000 max_fails=3 fail_timeout=30s weight=100;  # Real backend
        server 192.168.0.105:5051 max_fails=3 fail_timeout=30s weight=50;   # Test backend 1
        server 192.168.0.105:5052 max_fails=3 fail_timeout=30s weight=50;   # Test backend 2
        server 192.168.0.106:5000 max_fails=3 fail_timeout=30s weight=100;
        server 192.168.0.107:5000 max_fails=3 fail_timeout=30s weight=100;
    }
    
    # HTTP Server (Development)
    server {
        listen 80;
        listen [::]:80;
        server_name localhost 192.168.0.105 *.local *.localhost;
        
        root /var/www/html;
        index index.html;
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API proxy
        location /api/ {
            proxy_pass http://backend_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Development timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # WebSocket support
        location /socket.io/ {
            proxy_pass http://websocket_cluster;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # Static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Frontend app
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Development tools
        location /dev/ {
            alias /var/www/dev/;
            autoindex on;
        }
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
    }
    
    # HTTPS Server (Development)
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost 192.168.0.105 *.local *.localhost;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/dev-cert.pem;
        ssl_certificate_key /etc/nginx/ssl/dev-key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        root /var/www/html;
        index index.html;
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API proxy
        location /api/ {
            proxy_pass http://backend_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Development timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # WebSocket support
        location /socket.io/ {
            proxy_pass http://websocket_cluster;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # Static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Frontend app
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Development tools
        location /dev/ {
            alias /var/www/dev/;
            autoindex on;
        }
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
    }
} 