# Development NGINX Load Balancer Configuration
# Designed for local development on 192.168.0.105
# Includes: Rate limiting, SSL termination, health checks, caching, security

user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65536;

# Enable real-time monitoring
load_module modules/ngx_http_status_module.so;
load_module modules/ngx_stream_module.so;

events {
    worker_connections 65536;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

# Development rate limiting (more lenient)
limit_req_zone $binary_remote_addr zone=api:10m rate=10000r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=1000r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=5000r/s;

# Upstream backend servers with health checks
upstream backend_cluster {
    zone backend_cluster 64k;
    
    # Local development servers
    server 192.168.0.105:5050 max_fails=3 fail_timeout=30s weight=100;
    server 192.168.0.106:5050 max_fails=3 fail_timeout=30s weight=100;
    server 192.168.0.107:5050 max_fails=3 fail_timeout=30s weight=100;
    
    # Backup servers (optional for development)
    server 192.168.0.108:5050 backup;
    server 192.168.0.109:5050 backup;
    
    # Health checks
    health_check interval=5s fails=3 passes=2 uri=/health;
    
    # Session persistence
    sticky cookie srv_id expires=1h domain=.local;
    
    # Load balancing method
    least_conn;
    
    # Connection limits
    max_conns=1000;
}

# Redis cluster for session management (local development)
upstream redis_cluster {
    zone redis_cluster 64k;
    
    server 192.168.0.105:6379 max_fails=3 fail_timeout=30s weight=100;
    server 192.168.0.106:6379 max_fails=3 fail_timeout=30s weight=100;
    server 192.168.0.107:6379 max_fails=3 fail_timeout=30s weight=100;
    
    health_check interval=5s fails=3 passes=2;
}

# WebSocket upstream
upstream websocket_cluster {
    zone websocket_cluster 64k;
    
    server 192.168.0.105:5050 max_fails=3 fail_timeout=30s weight=100;
    server 192.168.0.106:5050 max_fails=3 fail_timeout=30s weight=100;
    server 192.168.0.107:5050 max_fails=3 fail_timeout=30s weight=100;
    
    health_check interval=5s fails=3 passes=2;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance tuning
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Development rate limiting (more lenient)
    limit_req_zone $binary_remote_addr zone=global:10m rate=50000r/s;
    limit_req_zone $binary_remote_addr zone=api_global:10m rate=25000r/s;
    
    # Security headers (development friendly)
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; style-src 'self' 'unsafe-inline' data: blob:; img-src 'self' data: blob: https:; font-src 'self' data: blob:; connect-src 'self' ws: wss: https: http: data: blob:;" always;
    
    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name localhost 192.168.0.105 *.local *.localhost;
        
        # Development: Allow HTTP for easier testing
        # In production, redirect to HTTPS
        # return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost 192.168.0.105 *.local *.localhost;
        
        # Development SSL configuration
        ssl_certificate /etc/nginx/ssl/dev-cert.pem;
        ssl_certificate_key /etc/nginx/ssl/dev-key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling off; # Disabled for development
        ssl_stapling_verify off; # Disabled for development
        
        # Development: More lenient rate limiting
        limit_req zone=global burst=5000 nodelay;
        
        # API rate limiting
        location /api/ {
            limit_req zone=api_global burst=2500 nodelay;
            limit_req zone=api burst=1000 nodelay;
            
            # Proxy to backend
            proxy_pass http://backend_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Development: Longer timeouts for debugging
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Health check endpoint
            location /api/health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        
        # WebSocket support
        location /socket.io/ {
            limit_req zone=api_global burst=5000 nodelay;
            
            proxy_pass http://websocket_cluster;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # Static files with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        # Frontend app (development)
        location / {
            root /var/www/html;
            try_files $uri $uri/ /index.html;
            
            # Development: No caching for HTML files
            location ~* \.(html)$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
        }
        
        # Development endpoints
        location /dev/ {
            # Development tools and debugging
            alias /var/www/dev/;
            autoindex on;
        }
        
        # Monitoring endpoint (NGINX Plus)
        location /nginx_status {
            access_log off;
            stub_status on;
        }
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Development: Allow CORS for local development
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }
    }
}

# Stream module for TCP/UDP load balancing
stream {
    # Database load balancing (local development)
    upstream db_cluster {
        zone db_cluster 64k;
        
        server 192.168.0.105:5432 max_fails=3 fail_timeout=30s weight=100;
        server 192.168.0.106:5432 max_fails=3 fail_timeout=30s weight=100;
        server 192.168.0.107:5432 max_fails=3 fail_timeout=30s weight=100;
        
        health_check interval=5s fails=3 passes=2;
    }
    
    server {
        listen 5432;
        proxy_pass db_cluster;
        proxy_timeout 1s;
        proxy_responses 1;
        health_check interval=5s fails=3 passes=2;
    }
} 