# Development HAProxy Load Balancer Configuration
# Designed for local development on 192.168.0.105
# Includes: Rate limiting, SSL termination, health checks, monitoring

global
    # Performance tuning for development
    maxconn 10000
    nbproc 2
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # Logging
    log /dev/log local0
    log /dev/log local1 notice
    
    # Security
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon
    
    # SSL
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-ssl-options no-sslv3 no-tlsv10 no-tlsv11
    
    # Stats
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    
    # Development: Longer timeouts for debugging
    timeout connect 30s
    timeout client 300s
    timeout server 300s
    timeout http-request 60s
    timeout http-keep-alive 30s
    timeout queue 60s
    timeout tunnel 1h
    timeout client-fin 60s
    timeout server-fin 60s
    
    # Retries
    retries 3
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json application/xml

# Development rate limiting (more lenient)
frontend rate_limit
    bind *:80
    mode http
    
    # Development: More lenient rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 50000 }
    
    # Development: Allow HTTP for easier testing
    # In production, redirect to HTTPS
    # redirect scheme https code 301

# Main HTTPS frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/private/dev-localhost.pem
    mode http
    
    # Development: More lenient security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; style-src 'self' 'unsafe-inline' data: blob:; img-src 'self' data: blob: https:; font-src 'self' data: blob:; connect-src 'self' ws: wss: https: http: data: blob:;"
    
    # Development: Allow CORS
    http-response set-header Access-Control-Allow-Origin "*"
    http-response set-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    http-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
    
    # Rate limiting for different endpoints (development: more lenient)
    acl is_api path_beg /api/
    acl is_login path_beg /api/auth/
    acl is_upload path_beg /api/upload/
    
    # Apply rate limits
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    
    # Development: More lenient API rate limiting
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 25000 } is_api
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 1000 } is_login
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 5000 } is_upload
    
    # Route to appropriate backend
    use_backend api_backend if is_api
    use_backend static_backend if { path_end .js .css .png .jpg .jpeg .gif .ico .svg .woff .woff2 .ttf .eot }
    default_backend frontend_backend

# WebSocket frontend
frontend websocket_frontend
    bind *:8080 ssl crt /etc/ssl/private/dev-localhost.pem
    mode http
    
    # WebSocket upgrade
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws
    
    use_backend websocket_backend if is_websocket
    default_backend websocket_backend

# API backend cluster (local development)
backend api_backend
    mode http
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    # Health check
    option httpchk
    http-check expect status 200
    
    # Session persistence
    cookie SRVID insert indirect nocache
    
    # Local development servers
    server api1 192.168.0.105:5050 check weight 100 maxconn 1000 cookie api1
    server api2 192.168.0.106:5050 check weight 100 maxconn 1000 cookie api2
    server api3 192.168.0.107:5050 check weight 100 maxconn 1000 cookie api3
    server api4 192.168.0.108:5050 check weight 50 maxconn 500 cookie api4 backup
    server api5 192.168.0.109:5050 check weight 50 maxconn 500 cookie api5 backup
    
    # Development: Longer timeouts
    timeout connect 30s
    timeout server 300s
    
    # Retries
    retry-on all-retryable-errors
    retries 3

# WebSocket backend cluster (local development)
backend websocket_backend
    mode http
    balance leastconn
    option httpchk GET /health
    
    # WebSocket specific
    option forceclose
    option http-server-close
    
    # Local development servers
    server ws1 192.168.0.105:5050 check weight 100 maxconn 2000
    server ws2 192.168.0.106:5050 check weight 100 maxconn 2000
    server ws3 192.168.0.107:5050 check weight 100 maxconn 2000
    
    # Timeouts for WebSocket
    timeout connect 30s
    timeout server 7d

# Frontend static files backend (local development)
backend frontend_backend
    mode http
    balance roundrobin
    
    # Local development static file servers
    server static1 192.168.0.105:80 check weight 100 maxconn 1000
    server static2 192.168.0.106:80 check weight 100 maxconn 1000

# Static files backend (local development)
backend static_backend
    mode http
    balance roundrobin
    
    # Local development CDN or static file servers
    server static1 192.168.0.105:80 check weight 100 maxconn 2000
    server static2 192.168.0.106:80 check weight 100 maxconn 2000
    
    # Caching headers
    http-response set-header Cache-Control "public, max-age=31536000" if { path_end .js .css .png .jpg .jpeg .gif .ico .svg .woff .woff2 .ttf .eot }

# Database load balancing (local development)
listen db_cluster
    mode tcp
    bind *:5432
    balance leastconn
    
    # Health check
    option tcp-check
    
    # Local development servers
    server db1 192.168.0.105:5432 check weight 100 maxconn 500
    server db2 192.168.0.106:5432 check weight 100 maxconn 500
    server db3 192.168.0.107:5432 check weight 100 maxconn 500

# Redis cluster load balancing (local development)
listen redis_cluster
    mode tcp
    bind *:6379
    balance leastconn
    
    # Health check
    option tcp-check
    
    # Local development servers
    server redis1 192.168.0.105:6379 check weight 100 maxconn 1000
    server redis2 192.168.0.106:6379 check weight 100 maxconn 1000
    server redis3 192.168.0.107:6379 check weight 100 maxconn 1000

# Stats and monitoring
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats show-legends
    stats show-node 