{"level":"error","message":"Get questions error: adminService is not defined","service":"mock-test-api","stack":"ReferenceError: adminService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:937:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:41"}
{"level":"error","message":"Get categories error: examService is not defined","service":"mock-test-api","stack":"ReferenceError: examService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:713:28\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:41"}
{"level":"error","message":"Get questions error: adminService is not defined","service":"mock-test-api","stack":"ReferenceError: adminService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:937:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:42"}
{"level":"error","message":"Get categories error: examService is not defined","service":"mock-test-api","stack":"ReferenceError: examService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:713:28\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:42"}
{"level":"error","message":"Get questions error: adminService is not defined","service":"mock-test-api","stack":"ReferenceError: adminService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:937:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:44"}
{"level":"error","message":"Get categories error: examService is not defined","service":"mock-test-api","stack":"ReferenceError: examService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:713:28\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:44"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:45"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:46"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:49"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:53"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:23"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:24"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:26"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:30"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:01"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:02"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:04"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:08"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:38"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:39"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:42"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:46"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:16"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:17"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:19"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:23"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:53"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:54"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:56"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:00"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:30"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:31"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:33"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:37"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:07"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:08"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:10"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:14"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:44"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:45"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:47"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:51"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:21"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:22"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:24"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:28"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:01"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:02"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:04"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:08"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:38"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:39"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:41"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:45"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:16"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:17"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:19"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:23"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:53"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:54"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:56"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:44:00"}
{"code":"42703","file":"parse_target.c","length":128,"level":"error","line":"1065","message":"Database query error: column \"first_name\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"first_name\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:05:54"}
{"code":"42703","file":"parse_target.c","length":128,"level":"error","line":"1065","message":"Register first admin error: column \"first_name\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"first_name\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:05:54"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:08:39"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:08:39"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:09:28"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:09:28"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:10:26"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:10:26"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:13:38"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:13:38"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:15:32"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:15:32"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:17:01"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:17:01"}
{"clientVersion":"6.13.0","errorCode":"P1012","level":"error","message":"Database connection failed: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:154:5)","timestamp":"2025-08-03 15:05:47"}
{"clientVersion":"6.13.0","errorCode":"P1012","level":"error","message":"Database connection failed: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:154:5)","timestamp":"2025-08-03 15:07:09"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/auth/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/auth/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-03 15:10:54","url":"/api/v1/auth/health","userId":"anonymous"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:32"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/admin/analytics/dashboard not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/analytics/dashboard not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-03 15:48:34","url":"/api/v1/admin/analytics/dashboard","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:09"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:09"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:11"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:11"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:45"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:45"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:48"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:48"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:00"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:00"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:03"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:03"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:07"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:07"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:14"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:14"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:58"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-03 23:59:12"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:04","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:05","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:08","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:12","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:20","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:21","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:23","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:27","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:31","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:32","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:34","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:38","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:09","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:10","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:12","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:16","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 00:46:21"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:27","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:28","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:30","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:34","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:08"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:09","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:10","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:12","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:16","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:26"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:37"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:49"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:56","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:33"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:33"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:47"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:47"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:10:30"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:10:34"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:10:36"}
{"code":"EIO","errno":-5,"level":"error","message":"Uncaught Exception: EIO: i/o error, write","service":"mock-test-api","stack":"Error: EIO: i/o error, write\n    at writeSync (node:fs:934:3)\n    at SyncWriteStream._write (node:internal/fs/sync_write_stream:27:5)\n    at writeOrBuffer (node:internal/streams/writable:572:12)\n    at _write (node:internal/streams/writable:501:10)\n    at Writable.write (node:internal/streams/writable:510:10)\n    at Console.log (/home/ahmadi/Desktop/mock/node_modules/winston/lib/winston/transports/console.js:87:23)\n    at Console._write (/home/ahmadi/Desktop/mock/node_modules/winston-transport/modern.js:103:17)\n    at doWrite (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:390:139)\n    at writeOrBuffer (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:381:5)\n    at Writable.write (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:302:11)","syscall":"write","timestamp":"2025-08-04 01:13:48"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:13:48"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:14:00"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:14:15"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:14:29"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:18:56"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:18:57"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:18:59"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:03"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:05"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:06"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:09"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:13"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:27"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:28"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:30"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:34"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:20:06"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:20:26"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:20:50"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:16"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:26"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:36"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:49"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:22:09.117Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:22:09.117Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:22:09"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:22:11"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:22:29"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:22:55"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:23:42"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:23:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:52.718Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:52.718Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:53.877Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:53.877Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:55.935Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:55.935Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:58.257Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:58.257Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:59.501Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:59.501Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:01.521Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:01.521Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:25:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:05.602Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:05.602Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:25:05"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:25:31"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:25:39"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:35:12"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:36:43"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:37:21"}
{"clientVersion":"6.13.0","level":"error","message":"Admin create booking failed \nInvalid `tx.examBooking.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:622:49\n\n  619 // Create booking with transaction\n  620 const booking = await prisma.$transaction(async (tx) => {\n  621   // Create the booking\n→ 622   const newBooking = await tx.examBooking.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            scheduledAt: new Date(\"2025-08-05T10:00:00.000Z\"),\n            status: \"CONFIRMED\",\n            totalAmount: new Prisma.Decimal(\"9.99\"),\n            currency: \"USD\",\n            notes: \"Admin scheduled test\",\n            createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n            ~~~~~~~~~\n        ?   id?: String,\n        ?   bookingDate?: DateTime,\n        ?   paymentId?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   payment?: PaymentUncheckedCreateNestedOneWithoutBookingInput,\n        ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutBookingInput\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            }\n          }\n        })\n\nUnknown argument `createdBy`. Did you mean `createdAt`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `tx.examBooking.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:622:49\n\n  619 // Create booking with transaction\n  620 const booking = await prisma.$transaction(async (tx) => {\n  621   // Create the booking\n→ 622   const newBooking = await tx.examBooking.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            scheduledAt: new Date(\"2025-08-05T10:00:00.000Z\"),\n            status: \"CONFIRMED\",\n            totalAmount: new Prisma.Decimal(\"9.99\"),\n            currency: \"USD\",\n            notes: \"Admin scheduled test\",\n            createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n            ~~~~~~~~~\n        ?   id?: String,\n        ?   bookingDate?: DateTime,\n        ?   paymentId?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   payment?: PaymentUncheckedCreateNestedOneWithoutBookingInput,\n        ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutBookingInput\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            }\n          }\n        })\n\nUnknown argument `createdBy`. Did you mean `createdAt`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:622:28\n    at async Proxy._transactionWithCallback (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:8173)\n    at async createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:620:23)","timestamp":"2025-08-04 02:26:16"}
{"level":"error","message":"Exam booking update validation error next is not a function","service":"mock-test-api","stack":"TypeError: next is not a function\n    at validateBookingUpdate (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:70:5)\n    at updateBooking (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:287:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)","timestamp":"2025-08-04 03:04:01"}
{"level":"error","message":"Update booking failed Cannot read properties of undefined (reading 'status')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'status')\n    at validateBookingUpdate (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:73:9)\n    at updateBooking (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:287:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)","timestamp":"2025-08-04 03:04:01"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-04 03:24:54"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-04 03:25:03"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-04 03:25:44"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.522Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.522Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.522Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.522Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:21","timestamp":"2025-08-04 03:30:37"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.834Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.834Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.834Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.834Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:21","timestamp":"2025-08-04 03:30:37"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:40.760Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:40.760Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:40.760Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:40.760Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:40"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.546Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.546Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.546Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.546Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:41"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.847Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.847Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.847Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.847Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:41"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:42.612Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:42.612Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:42.612Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:42.612Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:42"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:49.412Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:49.412Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:49.412Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:49.412Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:49"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:50.519Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:50.519Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:50.519Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:50.519Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:50"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:32:09.799Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:32:09.799Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:32:09.799Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:32:09.799Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:32:09"}
{"clientVersion":"6.13.0","level":"error","message":"Complete exam attempt failed \nInvalid `prisma.examAttempt.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:504:55\n\n  501 const isPassed = percentage >= attempt.exam.passingMarks;\n  502 \n  503 // Update attempt\n→ 504 const updatedAttempt = await prisma.examAttempt.update({\n        where: {\n          id: \"cmdwssd4n0001i27odi4jos3q\"\n        },\n        data: {\n          status: \"COMPLETED\",\n          endTime: new Date(\"2025-08-04T07:37:38.690Z\"),\n          ~~~~~~~\n          score: 0,\n          percentage: NaN,\n          correctAnswers: 0,\n          isPassed: false,\n          completedAt: new Date(\"2025-08-04T07:37:38.690Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   startedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   obtainedMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   timeSpent?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   ipAddress?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   userAgent?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   isCheating?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   cheatingReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   user?: UserUpdateOneRequiredWithoutExamAttemptsNestedInput,\n      ?   exam?: ExamUpdateOneRequiredWithoutAttemptsNestedInput,\n      ?   booking?: ExamBookingUpdateOneWithoutAttemptsNestedInput,\n      ?   responses?: QuestionResponseUpdateManyWithoutAttemptNestedInput,\n      ?   questionScores?: QuestionScoreUpdateManyWithoutAttemptNestedInput,\n      ?   examScore?: ExamScoreUpdateOneWithoutAttemptNestedInput,\n      ?   certificate?: CertificateUpdateOneWithoutAttemptNestedInput\n        }\n      })\n\nUnknown argument `endTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:504:55\n\n  501 const isPassed = percentage >= attempt.exam.passingMarks;\n  502 \n  503 // Update attempt\n→ 504 const updatedAttempt = await prisma.examAttempt.update({\n        where: {\n          id: \"cmdwssd4n0001i27odi4jos3q\"\n        },\n        data: {\n          status: \"COMPLETED\",\n          endTime: new Date(\"2025-08-04T07:37:38.690Z\"),\n          ~~~~~~~\n          score: 0,\n          percentage: NaN,\n          correctAnswers: 0,\n          isPassed: false,\n          completedAt: new Date(\"2025-08-04T07:37:38.690Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   startedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   obtainedMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   timeSpent?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   ipAddress?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   userAgent?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   isCheating?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   cheatingReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   user?: UserUpdateOneRequiredWithoutExamAttemptsNestedInput,\n      ?   exam?: ExamUpdateOneRequiredWithoutAttemptsNestedInput,\n      ?   booking?: ExamBookingUpdateOneWithoutAttemptsNestedInput,\n      ?   responses?: QuestionResponseUpdateManyWithoutAttemptNestedInput,\n      ?   questionScores?: QuestionScoreUpdateManyWithoutAttemptNestedInput,\n      ?   examScore?: ExamScoreUpdateOneWithoutAttemptNestedInput,\n      ?   certificate?: CertificateUpdateOneWithoutAttemptNestedInput\n        }\n      })\n\nUnknown argument `endTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:504:30)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:63:20","timestamp":"2025-08-04 03:37:38"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"clientVersion":"6.13.0","level":"error","message":"Complete exam attempt failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:528:48\n\n  525 // Create certificate if passed\n  526 let certificate = null;\n  527 if (isPassed) {\n→ 528   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwszh4r0001i2lv0eckdnij\",\n            certificateNumber: \"CERT-1754293392162-w0xv5shag\",\n            issuedAt: new Date(\"2025-08-04T07:43:12.162Z\"),\n            expiresAt: new Date(\"2026-08-04T07:43:12.162Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:528:48\n\n  525 // Create certificate if passed\n  526 let certificate = null;\n  527 if (isPassed) {\n→ 528   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwszh4r0001i2lv0eckdnij\",\n            certificateNumber: \"CERT-1754293392162-w0xv5shag\",\n            issuedAt: new Date(\"2025-08-04T07:43:12.162Z\"),\n            expiresAt: new Date(\"2026-08-04T07:43:12.162Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:528:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:43:12"}
{"attemptId":"cmdwt1tok0001i2knojxwe10f","error":"\nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:562:48\n\n  559 let certificate = null;\n  560 if (isPassed) {\n  561   logger.info('Creating certificate for passed attempt', { attemptId });\n→ 562   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwt1tok0001i2knojxwe10f\",\n            certificateNumber: \"CERT-1754293499700-x627z4t8b\",\n            issuedAt: new Date(\"2025-08-04T07:44:59.700Z\"),\n            expiresAt: new Date(\"2026-08-04T07:44:59.700Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.","level":"error","message":"Complete exam attempt failed","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:562:48\n\n  559 let certificate = null;\n  560 if (isPassed) {\n  561   logger.info('Creating certificate for passed attempt', { attemptId });\n→ 562   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwt1tok0001i2knojxwe10f\",\n            certificateNumber: \"CERT-1754293499700-x627z4t8b\",\n            issuedAt: new Date(\"2025-08-04T07:44:59.700Z\"),\n            expiresAt: new Date(\"2026-08-04T07:44:59.700Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:562:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:44:59","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Exam booking validation error next is not a function","service":"mock-test-api","stack":"TypeError: next is not a function\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:43:5)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:04:46"}
{"level":"error","message":"Admin create booking failed Cannot read properties of undefined (reading 'status')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'status')\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:46:9)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:04:46"}
{"level":"error","message":"Exam booking validation error next is not a function","service":"mock-test-api","stack":"TypeError: next is not a function\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:43:5)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:04:47"}
{"level":"error","message":"Admin create booking failed Cannot read properties of undefined (reading 'status')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'status')\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:46:9)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:04:47"}
{"level":"error","message":"Exam booking validation error next is not a function","service":"mock-test-api","stack":"TypeError: next is not a function\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:43:5)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:05:03"}
{"level":"error","message":"Admin create booking failed Cannot read properties of undefined (reading 'status')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'status')\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:46:9)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:05:03"}
{"level":"error","message":"Exam booking validation error next is not a function","service":"mock-test-api","stack":"TypeError: next is not a function\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:43:5)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:05:04"}
{"level":"error","message":"Admin create booking failed Cannot read properties of undefined (reading 'status')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'status')\n    at validateExamBooking (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:46:9)\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:547:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-04 05:05:04"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:255:33)","timestamp":"2025-08-04 05:19:11"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/analytics/export?type=analytics not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/export?type=analytics not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 06:40:30","url":"/api/v1/analytics/export?type=analytics","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/analytics/export?type=analytics not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/export?type=analytics not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 06:40:31","url":"/api/v1/analytics/export?type=analytics","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/analytics/export?type=analytics not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/export?type=analytics not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 06:40:32","url":"/api/v1/analytics/export?type=analytics","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/analytics/export?type=performance not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/export?type=performance not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 06:40:32","url":"/api/v1/analytics/export?type=performance","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/analytics/export?type=category not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/export?type=category not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 06:40:33","url":"/api/v1/analytics/export?type=category","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-04 06:47:20"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 11:39:44"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 11:53:33"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:120:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 11:57:44"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:120:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 11:57:44"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 11:58:05"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:120:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 11:58:21"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:140:25\n\n  137   skip,\n  138   take: limit\n  139 }),\n→ 140 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:120:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 11:58:21"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 11:58:55"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 11:58:55"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 11:59:29"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:00:16"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.","meta":{"column":"questions.is_active","modelName":"Question"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count(\nThe column `questions.is_active` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:00:16"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true,\n        ?   examQuestions?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true,\n        ?   examQuestions?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:01:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true,\n        ?   examQuestions?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true,\n        ?   examQuestions?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:01:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:15:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:36"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:36"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:137:25\n\n  134   skip,\n  135   take: limit\n  136 }),\n→ 137 prisma.question.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          type: \"MCQ\",\n                ~~~~~\n          isActive: true\n        }\n      })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:48"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:48"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:118:25\n\n  115 }\n  116 \n  117 const [questions, total] = await Promise.all([\n→ 118   prisma.question.findMany({\n          where: {\n            type: \"MCQ\",\n                  ~~~~~\n            isActive: true\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            exam_categories: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            images: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:117:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:522:25)","timestamp":"2025-08-04 12:16:54"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         options: {\n           create: [\n             {\n               text: \"asa\",\n               isCorrect: true\n             },\n             {\n               text: \"asdsad\",\n               isCorrect: false\n             },\n             {\n               text: \"asda\",\n               isCorrect: false\n             },\n             {\n               text: \"sds\",\n               isCorrect: false\n             }\n           ]\n         },\n     +   updatedAt: DateTime\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `updatedAt` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         options: {\n           create: [\n             {\n               text: \"asa\",\n               isCorrect: true\n             },\n             {\n               text: \"asdsad\",\n               isCorrect: false\n             },\n             {\n               text: \"asda\",\n               isCorrect: false\n             },\n             {\n               text: \"sds\",\n               isCorrect: false\n             }\n           ]\n         },\n     +   updatedAt: DateTime\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `updatedAt` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:19:30"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         options: {\n           create: [\n             {\n               text: \"asa\",\n               isCorrect: true\n             },\n             {\n               text: \"asdsad\",\n               isCorrect: false\n             },\n             {\n               text: \"asda\",\n               isCorrect: false\n             },\n             {\n               text: \"sds\",\n               isCorrect: false\n             }\n           ]\n         },\n     +   updatedAt: DateTime\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `updatedAt` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         options: {\n           create: [\n             {\n               text: \"asa\",\n               isCorrect: true\n             },\n             {\n               text: \"asdsad\",\n               isCorrect: false\n             },\n             {\n               text: \"asda\",\n               isCorrect: false\n             },\n             {\n               text: \"sds\",\n               isCorrect: false\n             }\n           ]\n         },\n     +   updatedAt: DateTime\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `updatedAt` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:19:31"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:21:42.219Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:21:42.219Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:21:42"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:21:43.308Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:21:43.308Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:21:43"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:22:17.699Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: undefined,\n         images: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:22:17.699Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:22:17"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:22:51.345Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:22:51.345Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:22:51"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:22:52.443Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:22:52.443Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:22:52"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:25:57.955Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:25:57.955Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:25:57"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:25:58.991Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you \",\n         type: \"MCQ\",\n               ~~~~~\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:25:58.991Z\"),\n         options: {\n           create: []\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `type`. Expected QuestionType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:25:58"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n               ~~\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:26:28.155Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `tags`: Invalid value provided. Expected QuestionTagUncheckedCreateNestedManyWithoutQuestionInput, provided ().","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n               ~~\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:26:28.155Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `tags`: Invalid value provided. Expected QuestionTagUncheckedCreateNestedManyWithoutQuestionInput, provided ().\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:26:28"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n               ~~\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:26:29.206Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `tags`: Invalid value provided. Expected QuestionTagUncheckedCreateNestedManyWithoutQuestionInput, provided ().","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:34:46\n\n  31 }\n  32 \n  33 // Create question with options\n→ 34 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         tags: [],\n               ~~\n         images: [],\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:26:29.206Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nArgument `tags`: Invalid value provided. Expected QuestionTagUncheckedCreateNestedManyWithoutQuestionInput, provided ().\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:34:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:26:29"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:32:46\n\n  29 }\n  30 \n  31 // Create question with options\n→ 32 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:27:37.758Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n         ~~~~~~~~~~~~\n           select: {\n             name: true\n           }\n         },\n     ?   examQuestions?: true,\n     ?   images?: true,\n     ?   responses?: true,\n     ?   scores?: true,\n     ?   tags?: true,\n     ?   users_questions_approvedByTousers?: true,\n     ?   users_questions_createdByTousers?: true,\n     ?   exam_categories?: true\n       }\n     })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:32:46\n\n  29 }\n  30 \n  31 // Create question with options\n→ 32 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:27:37.758Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n         ~~~~~~~~~~~~\n           select: {\n             name: true\n           }\n         },\n     ?   examQuestions?: true,\n     ?   images?: true,\n     ?   responses?: true,\n     ?   scores?: true,\n     ?   tags?: true,\n     ?   users_questions_approvedByTousers?: true,\n     ?   users_questions_createdByTousers?: true,\n     ?   exam_categories?: true\n       }\n     })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:32:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:27:37"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:32:46\n\n  29 }\n  30 \n  31 // Create question with options\n→ 32 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:27:38.866Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n         ~~~~~~~~~~~~\n           select: {\n             name: true\n           }\n         },\n     ?   examQuestions?: true,\n     ?   images?: true,\n     ?   responses?: true,\n     ?   scores?: true,\n     ?   tags?: true,\n     ?   users_questions_approvedByTousers?: true,\n     ?   users_questions_createdByTousers?: true,\n     ?   exam_categories?: true\n       }\n     })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:32:46\n\n  29 }\n  30 \n  31 // Create question with options\n→ 32 const question = await prisma.question.create({\n       data: {\n         text: \"how are you\",\n         type: \"MULTIPLE_CHOICE\",\n         difficulty: \"EASY\",\n         marks: 1,\n         timeLimit: 60,\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-04T16:27:38.866Z\"),\n         options: {\n           create: [\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asd\",\n               isCorrect: true\n             },\n             {\n               text: \"asdd\",\n               isCorrect: false\n             },\n             {\n               text: \"asdas\",\n               isCorrect: false\n             }\n           ]\n         }\n       },\n       include: {\n         options: true,\n         examCategory: {\n         ~~~~~~~~~~~~\n           select: {\n             name: true\n           }\n         },\n     ?   examQuestions?: true,\n     ?   images?: true,\n     ?   responses?: true,\n     ?   scores?: true,\n     ?   tags?: true,\n     ?   users_questions_approvedByTousers?: true,\n     ?   users_questions_createdByTousers?: true,\n     ?   exam_categories?: true\n       }\n     })\n\nUnknown field `examCategory` for include statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:32:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:493:22)","timestamp":"2025-08-04 12:27:38"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:03:02"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:03:03"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get exam by ID failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:166:20)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:04:29"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get exam by ID failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:166:20)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:04:36"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:04:44"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:04:45"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:04:47"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:47"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:47"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:48"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:48"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:50"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:50"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:54"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:04:54"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:02"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:02"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:03"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:03"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:05"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:05"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:09"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:05:09"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:05:15"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:05:16"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:05:18"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:05:22"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:06:22"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:06:23"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:06:25"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:06:29"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get exam by ID failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:166:20)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:07:26"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:07:29"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:07:30"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:07:33"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:07:37"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get exam by ID failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:166:38\n\n  163  */\n  164 async getExamById(examId) {\n  165   try {\n→ 166     const exam = await prisma.exam.findUnique(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:166:20)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:07:38"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-04 13:07:56","url":"/api/v1/exams","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:08:21"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:08:22"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"Exam"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 13:08:24"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:26"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:26"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:27"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:27"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:29"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:29"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:33"}
{"clientVersion":"6.13.0","code":"P2022","level":"error","message":"Get user bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.","meta":{"column":"exams.totalQuestions","modelName":"ExamBooking"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:130:28\n\n  127 }\n  128 \n  129 const [bookings, total] = await Promise.all([\n→ 130   prisma.examBooking.findMany(\nThe column `exams.totalQuestions` does not exist in the current database.\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getUserBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:129:33)\n    at async getUserBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:227:24)","timestamp":"2025-08-04 13:08:33"}
{"error":"Not enough questions available. Need 10, have 4","examId":"exam_001","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:09:30","userId":null}
{"level":"error","message":"Get exam by ID failed Not enough questions available. Need 10, have 4","service":"mock-test-api","stack":"Error: Not enough questions available. Need 10, have 4\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:52:15)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:09:30"}
{"error":"Assignment to constant variable.","examId":"exam_003","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:18","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:18"}
{"error":"Assignment to constant variable.","examId":"exam_003","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:18","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:18"}
{"error":"Assignment to constant variable.","examId":"exam_003","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:28","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:28"}
{"error":"Assignment to constant variable.","examId":"exam_003","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:28","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:28"}
{"error":"Assignment to constant variable.","examId":"exam_003","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:31","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:31"}
{"error":"Assignment to constant variable.","examId":"exam_003","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:31","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:31"}
{"error":"Assignment to constant variable.","examId":"exam_002","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:33","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:33"}
{"error":"Assignment to constant variable.","examId":"exam_002","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:33","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:33"}
{"error":"Assignment to constant variable.","examId":"exam_004","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:39","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:39"}
{"error":"Assignment to constant variable.","examId":"exam_004","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:39","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:39"}
{"error":"Assignment to constant variable.","examId":"exam_004","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:42","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:42"}
{"error":"Assignment to constant variable.","examId":"exam_004","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:42","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:42"}
{"error":"Assignment to constant variable.","examId":"exam_004","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:48","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:48"}
{"error":"Assignment to constant variable.","examId":"exam_004","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:35:48","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:183:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:35:48"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 13:41:11"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 25,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 25,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-04 13:41:34"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-04 13:41:55"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 13:43:46"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-04 13:44:04"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-04 13:46:21"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 13:47:18"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"Advanced Programming Test\",\n         description: \"A comprehensive test covering advanced programming concepts\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 120,\n         totalQuestions: 8,\n         totalMarks: 100,\n         passingMarks: 60,\n         price: 19.99,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-04 13:47:39"}
{"error":"Assignment to constant variable.","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:50:10","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:50:10"}
{"error":"Assignment to constant variable.","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:50:10","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:50:10"}
{"error":"Assignment to constant variable.","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:51:48","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:51:48"}
{"error":"Assignment to constant variable.","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:51:48","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:51:48"}
{"error":"Assignment to constant variable.","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:51:54","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:51:54"}
{"error":"Assignment to constant variable.","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 13:51:54","userId":null}
{"level":"error","message":"Get exam by ID failed Assignment to constant variable.","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:54:23)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 13:51:54"}
{"ip":"::1","level":"error","message":"Application Error Unterminated string in JSON at position 740","method":"POST","service":"mock-test-api","stack":"SyntaxError: Unterminated string in JSON at position 740\n    at JSON.parse (<anonymous>)\n    at parse (/home/ahmadi/Desktop/mock/node_modules/body-parser/lib/types/json.js:92:19)\n    at /home/ahmadi/Desktop/mock/node_modules/body-parser/lib/read.js:128:18\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at invokeCallback (/home/ahmadi/Desktop/mock/node_modules/raw-body/index.js:238:16)\n    at done (/home/ahmadi/Desktop/mock/node_modules/raw-body/index.js:227:7)\n    at IncomingMessage.onEnd (/home/ahmadi/Desktop/mock/node_modules/raw-body/index.js:287:7)\n    at IncomingMessage.emit (node:events:524:28)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)","timestamp":"2025-08-04 13:54:42","url":"/api/v1/admin/questions/bulk","userId":"anonymous"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:01:58"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:04:38"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:06:50"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:09:04"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:10:29"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:15:47"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:18:18"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:24:58"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:27:59"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:31:19","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1056:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:181:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:31:19"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:32:08","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1056:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:181:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:32:08"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 14:34:48"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:35:39","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:35:39"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:35:39","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:35:39"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:35:46","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:35:46"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:35:46","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:35:46"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:36:47","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:36:47"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:37:52","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:37:52"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:37:52","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:37:52"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:38:56","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:38:56"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 14:38:56","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1030:42)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:155:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 14:38:56"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 16:17:00"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 16:27:00"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:22","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:22"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:23","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:23"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:23","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:23"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:24","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:24"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:24","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:24"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:25","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:25"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:25","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:25"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:26","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:26"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:27","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:27"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:27","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:27"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:39","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:39"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:39","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:39"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:40","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:40"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:41","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:41"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:41","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:41"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:42","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:42"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:42","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:42"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:43","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:43"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:43","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:43"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:44","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:44"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:27:54","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:27:54"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-04 16:28:43","url":"/api/v1/exams","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:29:04","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:29:04"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:29:45","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:29:45"}
{"error":"Cannot read properties of undefined (reading 'length')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:29:53","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'length')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1104:58)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:29:53"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 16:31:48"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 16:31:54"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:32:50","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:32:50"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:32:51","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:32:51"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:32:52","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:32:52"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:32:55","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:32:55"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:32:56","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:32:56"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:08","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:08"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:09","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:09"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:27","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:27"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:27","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:27"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:27","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:27"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:28","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:28"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:28","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:28"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:28","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:28"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:29","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:29"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:30","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:30"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:30","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:30"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:31","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:31"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:33:32","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:33:32"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 16:35:03"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:33","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:33"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:33","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:33"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:33","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:33"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:33","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:33"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:34","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:34"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:34","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:34"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:36","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:36"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:37","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:37"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:38","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:38"}
{"error":"Cannot read properties of undefined (reading 'id')","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:35:44","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot read properties of undefined (reading 'id')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at /home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:58\n    at Array.find (<anonymous>)\n    at QuestionRandomizationService.generateQuantumUltraRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1112:30)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:157:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:35:44"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-04 16:45:34"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:46:01","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateCryptographicRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1319:68)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:227:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:46:01"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:46:02","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateCryptographicRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1319:68)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:227:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:46:02"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:46:02","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateCryptographicRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1319:68)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:227:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:46:02"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:46:03","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateCryptographicRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1319:68)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:227:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:46:03"}
{"error":"Cannot mix BigInt and other types, use explicit conversions","examId":"cmdxemzpq0009i2l47dst2dmf","level":"error","message":"Question generation failed","service":"mock-test-api","timestamp":"2025-08-04 16:46:04","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam by ID failed Cannot mix BigInt and other types, use explicit conversions","service":"mock-test-api","stack":"TypeError: Cannot mix BigInt and other types, use explicit conversions\n    at QuestionRandomizationService.generateCryptographicRandomSet (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:1319:68)\n    at QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:227:42)\n    at async ExamService.getExamById (/home/ahmadi/Desktop/mock/src/services/examService.js:186:25)\n    at async getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:90:22)","timestamp":"2025-08-04 16:46:04"}
{"attemptId":"cmdxervg5001di2syuuhlf183","attemptUserId":"cmdw3a9w30003i2jiq5yeaei0","level":"error","message":"Unauthorized attempt completion","service":"mock-test-api","timestamp":"2025-08-04 17:27:29","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"attemptId":"cmdxervg5001di2syuuhlf183","attemptUserId":"cmdw3a9w30003i2jiq5yeaei0","level":"error","message":"Unauthorized attempt completion","service":"mock-test-api","timestamp":"2025-08-04 17:27:29","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 00:14:35"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 00:25:11"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 00:36:09"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 00:37:00"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 00:37:14"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 00:37:22"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 00:37:50"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 00:56:56"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 00:57:23"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 00:58:47"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 01:20:22"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:150:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 01:20:28"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 01:21:33"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:07","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:47","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:48","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:50","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:53","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:55","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:25:57","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:26:01","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:26:15","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:26:16","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:26:18","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:26:22","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:27:49","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:27:50","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:27:53","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/exams/user/stats not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams/user/stats not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 01:27:57","url":"/api/v1/exams/user/stats","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:28:13"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:28:13"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:28:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:28:20"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:28:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:28:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:29:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1028:46\n\n  1025  */\n  1026 async getUserExamStats(userId) {\n  1027   try {\n→ 1028     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1028:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:29:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1043:53\n\n  1040   where: { userId, isPassed: true }\n  1041 });\n  1042 \n→ 1043 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1043:53\n\n  1040   where: { userId, isPassed: true }\n  1041 });\n  1042 \n→ 1043 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1043:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:30:07"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1048:53\n\n  1045   }\n  1046 });\n  1047 \n→ 1048 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1048:53\n\n  1045   }\n  1046 });\n  1047 \n→ 1048 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1048:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-05 01:30:46"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 01:33:03"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 01:35:50"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:231:12)","syscall":"listen","timestamp":"2025-08-05 01:47:39"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxdbtuu000vi2enst19dyh6\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxdbtuu000vi2enst19dyh6.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxdbtuu000vi2enst19dyh6\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxdbtuu000vi2enst19dyh6.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:07:35"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxdbtuu000vi2enst19dyh6\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxdbtuu000vi2enst19dyh6.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxdbtuu000vi2enst19dyh6\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxdbtuu000vi2enst19dyh6.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:07:36"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdy42wwg0001i215uac6fdc7\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdy42wwg0001i215uac6fdc7.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdy42wwg0001i215uac6fdc7\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdy42wwg0001i215uac6fdc7.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:08:19"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdy42wwg0001i215uac6fdc7\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdy42wwg0001i215uac6fdc7.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdy42wwg0001i215uac6fdc7\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdy42wwg0001i215uac6fdc7.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:09:44"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxgg7rl000pi2mfszq2un8p\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxgg7rl000pi2mfszq2un8p.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxgg7rl000pi2mfszq2un8p\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxgg7rl000pi2mfszq2un8p.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:11:43"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxgg7rl000pi2mfszq2un8p\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxgg7rl000pi2mfszq2un8p.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxgg7rl000pi2mfszq2un8p\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxgg7rl000pi2mfszq2un8p.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:12:20"}
{"clientVersion":"6.13.0","level":"error","message":"Download certificate failed \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxgg7rl000pi2mfszq2un8p\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxgg7rl000pi2mfszq2un8p.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1312:34\n\n  1309 fs.writeFileSync(pdfPath, pdfBuffer);\n  1310 \n  1311 // Update certificate with PDF path\n→ 1312 await prisma.certificate.update({\n         where: {\n           id: \"cmdxgg7rl000pi2mfszq2un8p\"\n         },\n         data: {\n           pdfPath: \"/home/ahmadi/Desktop/mock/uploads/certificates/cmdxgg7rl000pi2mfszq2un8p.pdf\",\n           ~~~~~~~\n       ?   id?: String | StringFieldUpdateOperationsInput,\n       ?   certificateNumber?: String | StringFieldUpdateOperationsInput,\n       ?   issuedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   expiresAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   isRevoked?: Boolean | BoolFieldUpdateOperationsInput,\n       ?   revokedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n       ?   revokedReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   pdfUrl?: String | NullableStringFieldUpdateOperationsInput | Null,\n       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n       ?   attempt?: ExamAttemptUpdateOneRequiredWithoutCertificateNestedInput,\n       ?   exam?: ExamUpdateOneRequiredWithoutCertificatesNestedInput,\n       ?   revoker?: UserUpdateOneWithoutRevokedCertificatesNestedInput,\n       ?   user?: UserUpdateOneRequiredWithoutCertificatesNestedInput\n         }\n       })\n\nUnknown argument `pdfPath`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.downloadCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1312:9)\n    at async downloadCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:595:22)","timestamp":"2025-08-05 02:12:21"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 02:39:45"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:43:26"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:43:27"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:43:52"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:44:22"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:44:52"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 02:46:25"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:47:11"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:47:41"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:48:12"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:48:42"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:48:59"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:49:12"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 02:49:21"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:49:42"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:50:12"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:50:42"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:51:12"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:51:42"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:52:12"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:52:42"}
{"level":"error","message":"Get all exams failed examsWithAttempts is not defined","service":"mock-test-api","stack":"ReferenceError: examsWithAttempts is not defined\n    at ExamService.getAllExams (/home/ahmadi/Desktop/mock/src/services/examService.js:151:16)\n    at async getAllExams (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:749:21)","timestamp":"2025-08-05 02:53:12"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 02:54:15"}
{"ip":"192.168.0.7","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:109:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 02:54:26","url":"/","userId":"anonymous"}
{"ip":"192.168.0.7","level":"error","message":"Application Error Route /favicon.ico not found","method":"GET","service":"mock-test-api","stack":"Error: Route /favicon.ico not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:109:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 02:54:27","url":"/favicon.ico","userId":"anonymous"}
{"ip":"192.168.0.7","level":"error","message":"Application Error Route /api/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:109:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 02:54:35","url":"/api/health","userId":"anonymous"}
{"ip":"192.168.0.7","level":"error","message":"Application Error Route /favicon.ico not found","method":"GET","service":"mock-test-api","stack":"Error: Route /favicon.ico not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:109:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 02:54:35","url":"/favicon.ico","userId":"anonymous"}
{"ip":"192.168.0.7","level":"error","message":"Application Error Route /favicon.ico not found","method":"GET","service":"mock-test-api","stack":"Error: Route /favicon.ico not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:109:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 02:54:43","url":"/favicon.ico","userId":"anonymous"}
{"ip":"192.168.0.132","level":"error","message":"Application Error Route /favicon.ico not found","method":"GET","service":"mock-test-api","stack":"Error: Route /favicon.ico not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:109:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 02:59:02","url":"/favicon.ico","userId":"anonymous"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:05"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:06"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:08"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:12"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:18"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:19"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:22"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:28"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:30"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:33"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:38"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examCategory.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:52\n\n  378   if (endDate) where.createdAt.lte = new Date(endDate);\n  379 }\n  380 \n→ 381 const categories = await prisma.examCategory.findMany({\n        include: {\n          _count: {\n            select: {\n              exams: true,\n              questions: true\n            }\n          },\n          exams: {\n            where: {},\n            include: {\n              _count: {\n                select: {\n                  examAttempts: true,\n                  ~~~~~~~~~~~~\n      ?           certificates?: true,\n      ?           attempts?: true,\n      ?           bookings?: true,\n      ?           questions?: true,\n      ?           examScores?: true\n                }\n              }\n            }\n          }\n        }\n      })\n\nUnknown field `examAttempts` for select statement on model `ExamCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examCategory.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:52\n\n  378   if (endDate) where.createdAt.lte = new Date(endDate);\n  379 }\n  380 \n→ 381 const categories = await prisma.examCategory.findMany({\n        include: {\n          _count: {\n            select: {\n              exams: true,\n              questions: true\n            }\n          },\n          exams: {\n            where: {},\n            include: {\n              _count: {\n                select: {\n                  examAttempts: true,\n                  ~~~~~~~~~~~~\n      ?           certificates?: true,\n      ?           attempts?: true,\n      ?           bookings?: true,\n      ?           questions?: true,\n      ?           examScores?: true\n                }\n              }\n            }\n          }\n        }\n      })\n\nUnknown field `examAttempts` for select statement on model `ExamCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:26)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:30\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:24:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:30\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:24:42"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'SUCCESS' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        where: {\n          status: \"SUCCESS\"\n                  ~~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'SUCCESS' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        where: {\n          status: \"SUCCESS\"\n                  ~~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'SUCCESS' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        where: {\n          status: \"SUCCESS\"\n                  ~~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'SUCCESS' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        where: {\n          status: \"SUCCESS\"\n                  ~~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'SUCCESS' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        where: {\n          status: \"SUCCESS\"\n                  ~~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'SUCCESS' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        where: {\n          status: \"SUCCESS\"\n                  ~~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examCategory.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:52\n\n  378   if (endDate) where.createdAt.lte = new Date(endDate);\n  379 }\n  380 \n→ 381 const categories = await prisma.examCategory.findMany({\n        include: {\n          _count: {\n            select: {\n              exams: true,\n              questions: true\n            }\n          },\n          exams: {\n            where: {},\n            include: {\n              _count: {\n                select: {\n                  examAttempts: true,\n                  ~~~~~~~~~~~~\n      ?           certificates?: true,\n      ?           attempts?: true,\n      ?           bookings?: true,\n      ?           questions?: true,\n      ?           examScores?: true\n                }\n              }\n            }\n          }\n        }\n      })\n\nUnknown field `examAttempts` for select statement on model `ExamCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examCategory.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:52\n\n  378   if (endDate) where.createdAt.lte = new Date(endDate);\n  379 }\n  380 \n→ 381 const categories = await prisma.examCategory.findMany({\n        include: {\n          _count: {\n            select: {\n              exams: true,\n              questions: true\n            }\n          },\n          exams: {\n            where: {},\n            include: {\n              _count: {\n                select: {\n                  examAttempts: true,\n                  ~~~~~~~~~~~~\n      ?           certificates?: true,\n      ?           attempts?: true,\n      ?           bookings?: true,\n      ?           questions?: true,\n      ?           examScores?: true\n                }\n              }\n            }\n          }\n        }\n      })\n\nUnknown field `examAttempts` for select statement on model `ExamCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:26)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:24:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)","timestamp":"2025-08-05 04:24:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:30\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:24:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:30\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:24:44"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:240:24\n\n  237   averagePayment,\n  238   paymentMethods\n  239 ] = await Promise.all([\n→ 240   prisma.payment.aggregate({\n          select: {\n            _sum: {\n              select: {\n                amount: true\n              }\n            }\n          },\n          where: {\n            status: \"SUCCESS\"\n                    ~~~~~~~~~\n          }\n        })\n\nInvalid value for argument `status`. Expected PaymentStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examCategory.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:52\n\n  378   if (endDate) where.createdAt.lte = new Date(endDate);\n  379 }\n  380 \n→ 381 const categories = await prisma.examCategory.findMany({\n        include: {\n          _count: {\n            select: {\n              exams: true,\n              questions: true\n            }\n          },\n          exams: {\n            where: {},\n            include: {\n              _count: {\n                select: {\n                  examAttempts: true,\n                  ~~~~~~~~~~~~\n      ?           certificates?: true,\n      ?           attempts?: true,\n      ?           bookings?: true,\n      ?           questions?: true,\n      ?           examScores?: true\n                }\n              }\n            }\n          }\n        }\n      })\n\nUnknown field `examAttempts` for select statement on model `ExamCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examCategory.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:52\n\n  378   if (endDate) where.createdAt.lte = new Date(endDate);\n  379 }\n  380 \n→ 381 const categories = await prisma.examCategory.findMany({\n        include: {\n          _count: {\n            select: {\n              exams: true,\n              questions: true\n            }\n          },\n          exams: {\n            where: {},\n            include: {\n              _count: {\n                select: {\n                  examAttempts: true,\n                  ~~~~~~~~~~~~\n      ?           certificates?: true,\n      ?           attempts?: true,\n      ?           bookings?: true,\n      ?           questions?: true,\n      ?           examScores?: true\n                }\n              }\n            }\n          }\n        }\n      })\n\nUnknown field `examAttempts` for select statement on model `ExamCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:381:26)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:30\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:24:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:52\n\n  549 .sort((a, b) => b._count.id - a._count.id)\n  550 .slice(0, 10)\n  551 .map(async (stat) => {\n→ 552   const question = await prisma.question.findUnique({\n          where: {\n            id: \"cmdwrj8ve000ji2o88kb25pfs\"\n          },\n          select: {\n            id: true,\n            text: true,\n            difficulty: true,\n            marks: true,\n            examCategory: {\n            ~~~~~~~~~~~~\n              select: {\n                name: true\n              }\n            },\n        ?   type?: true,\n        ?   examCategoryId?: true,\n        ?   timeLimit?: true,\n        ?   isActive?: true,\n        ?   isPublic?: true,\n        ?   createdBy?: true,\n        ?   approvedBy?: true,\n        ?   approvedAt?: true,\n        ?   usageCount?: true,\n        ?   correctAnswerRate?: true,\n        ?   averageTime?: true,\n        ?   createdAt?: true,\n        ?   updatedAt?: true,\n        ?   examQuestions?: true,\n        ?   images?: true,\n        ?   options?: true,\n        ?   responses?: true,\n        ?   scores?: true,\n        ?   tags?: true,\n        ?   users_questions_approvedByTousers?: true,\n        ?   users_questions_createdByTousers?: true,\n        ?   exam_categories?: true,\n        ?   _count?: true\n          }\n        })\n\nUnknown field `examCategory` for select statement on model `Question`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:552:30\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:24:46"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:50"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:51"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-05 04:24:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:49"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:49"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:34:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:25"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:25"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:28"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:28"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:35:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:36:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'PASSED' } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:430:28\n\n  427   },\n  428   _avg: { percentage: true }\n  429 }),\n→ 430 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_002\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:430:28\n\n  427   },\n  428   _avg: { percentage: true }\n  429 }),\n→ 430 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_002\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 1)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:36:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:416:32\n\n  413     ...where\n  414   }\n  415 }),\n→ 416 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          exam: {\n            examCategoryId: \"cat_001\"\n          },\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:68\n\n  560   }\n  561 });\n  562 \n→ 563 const correctResponses = await prisma.questionResponse.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n          question: {\n            options: {\n              some: {\n                id: {\n                  in: {\n                    selectedOptions: true,\n      +             _ref: String\n                  }\n                },\n                isCorrect: true\n              }\n            }\n          }\n        }\n      })\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:36:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:43:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:43:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:43:47"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 04:44:14"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_002\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_002\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 1)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:22"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:44:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:165:28\n\n  162 prisma.exam.count({ where }),\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n→ 165 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"PASSED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get revenue analytics failed \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:255:24\n\n  252   where: { ...where, status: 'COMPLETED' },\n  253   _sum: { amount: true }\n  254 }),\n→ 255 prisma.payment.groupBy({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          },\n          examId: true\n        },\n        by: [\n          \"examId\"\n        ],\n        ~~~~~~~~~~\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nInvalid value for argument `by`. Expected PaymentScalarFieldEnum.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getRevenueAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:239:11)\n    at async Promise.all (index 2)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    exam: {\n      examCategoryId: \"cat_001\"\n    },\n    status: \"PASSED\"\n            ~~~~~~~~\n  }\n}\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:409:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:402:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get question analysis failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get performance analytics failed \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.questionResponse.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    questionId: \"cmdwrj8ve000ji2o88kb25pfs\",\n    question: {\n      options: {\n        some: {\n          id: {\n            in: {\n              selectedOptions: true,\n+             _ref: String\n            }\n          },\n          isCorrect: true\n        }\n      }\n    }\n  }\n}\n\nArgument `_ref` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:563:38\n    at async Promise.all (index 0)\n    at async AnalyticsService.getQuestionAnalysis (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:547:28)\n    at async Promise.all (index 5)\n    at async AnalyticsService.getPerformanceAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:324:11)","timestamp":"2025-08-05 04:44:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:45:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1516:28\n\n  1513 }),\n  1514 \n  1515 // Average score\n→ 1516 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               score: true,\n               ~~~~~\n       ?       totalMarks?: true,\n       ?       obtainedMarks?: true,\n       ?       percentage?: true,\n       ?       timeSpent?: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\"\n         }\n       })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 5)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:45:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 7)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 7)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:02"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:02"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:04"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:04"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:05"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:05"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:05"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_003\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_003\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 2)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:05"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_002\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_002\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 1)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 7)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:12"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 7)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:12"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:12"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:12"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:12"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:12"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:42"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:43"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:45"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:45"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:50:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:432:28\n\n  429   },\n  430   _avg: { percentage: true }\n  431 }),\n→ 432 prisma.payment.aggregate({\n        select: {\n          _sum: {\n            select: {\n              amount: true\n            }\n          }\n        },\n        where: {\n          exam: {\n          ~~~~\n            examCategoryId: \"cat_001\"\n          },\n          status: \"COMPLETED\",\n      ?   AND?: PaymentWhereInput | PaymentWhereInput[],\n      ?   OR?: PaymentWhereInput[],\n      ?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   userId?: StringFilter | String,\n      ?   bookingId?: StringNullableFilter | String | Null,\n      ?   amount?: DecimalFilter | Decimal,\n      ?   currency?: StringFilter | String,\n      ?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n      ?   stripePaymentId?: StringNullableFilter | String | Null,\n      ?   stripeRefundId?: StringNullableFilter | String | Null,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   metadata?: JsonNullableFilter,\n      ?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n      ?   user?: UserScalarRelationFilter | UserWhereInput\n        }\n      })\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:50:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:49"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486 }),\n  1487 \n  1488 // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:50:49"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 7)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:25"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1538:28\n\n  1535 }),\n  1536 \n  1537 // Average completion time\n→ 1538 prisma.examAttempt.aggregate({\n         select: {\n           _avg: {\n             select: {\n               timeSpent: true\n             }\n           }\n         },\n         where: {\n           exam: {},\n           status: \"COMPLETED\",\n           completedAt: {\n             not: null\n           },\n           startedAt: {\n       +     not: DateTime\n           }\n         }\n       })\n\nArgument `not` must not be null.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 7)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:25"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_002\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_002\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 1)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:57:29"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_001\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_001\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 0)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:57:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_003\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_003\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 2)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:57:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 04:57:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get system analytics failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/analyticsService.js:166:28\n\n  163 prisma.exam.count({ where: { ...where, isActive: true } }),\n  164 prisma.examAttempt.count(),\n  165 prisma.examAttempt.count({ where: { status: 'COMPLETED', isPassed: true } }),\n→ 166 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: \"FAILED\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 4)\n    at async AnalyticsService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:161:11)\n    at async Promise.all (index 1)\n    at async AnalyticsService.getSystemAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:20:11)\n    at async getSystemAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:953:25)","timestamp":"2025-08-05 04:57:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get category analytics failed \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_002\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.payment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    }\n  },\n  where: {\n    exam: {\n    ~~~~\n      examCategoryId: \"cat_002\"\n    },\n    status: \"COMPLETED\",\n?   AND?: PaymentWhereInput | PaymentWhereInput[],\n?   OR?: PaymentWhereInput[],\n?   NOT?: PaymentWhereInput | PaymentWhereInput[],\n?   id?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   bookingId?: StringNullableFilter | String | Null,\n?   amount?: DecimalFilter | Decimal,\n?   currency?: StringFilter | String,\n?   paymentMethod?: EnumPaymentMethodFilter | PaymentMethod,\n?   stripePaymentId?: StringNullableFilter | String | Null,\n?   stripeRefundId?: StringNullableFilter | String | Null,\n?   description?: StringNullableFilter | String | Null,\n?   metadata?: JsonNullableFilter,\n?   refundedAt?: DateTimeNullableFilter | DateTime | Null,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   booking?: ExamBookingNullableScalarRelationFilter | ExamBookingWhereInput | Null,\n?   user?: UserScalarRelationFilter | UserWhereInput\n  }\n}\n\nUnknown argument `exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async /home/ahmadi/Desktop/mock/src/services/analyticsService.js:410:15\n    at async Promise.all (index 1)\n    at async AnalyticsService.getCategoryAnalytics (/home/ahmadi/Desktop/mock/src/services/analyticsService.js:403:29)\n    at async Promise.all (index 4)","timestamp":"2025-08-05 04:57:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:19"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:28"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1489:21\n\n  1486         }),\n  1487         \n  1488         // Completed exams (exams with attempts)\n→ 1489 prisma.exam.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           examAttempts: {\n           ~~~~~~~~~~~~\n             some: {}\n           },\n       ?   AND?: ExamWhereInput | ExamWhereInput[],\n       ?   OR?: ExamWhereInput[],\n       ?   NOT?: ExamWhereInput | ExamWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   title?: StringFilter | String,\n       ?   description?: StringNullableFilter | String | Null,\n       ?   examCategoryId?: StringFilter | String,\n       ?   duration?: IntFilter | Int,\n       ?   totalMarks?: IntFilter | Int,\n       ?   passingMarks?: IntFilter | Int,\n       ?   price?: DecimalFilter | Decimal,\n       ?   currency?: StringFilter | String,\n       ?   isActive?: BoolFilter | Boolean,\n       ?   isPublic?: BoolFilter | Boolean,\n       ?   allowRetakes?: BoolFilter | Boolean,\n       ?   maxRetakes?: IntFilter | Int,\n       ?   showResults?: BoolFilter | Boolean,\n       ?   showAnswers?: BoolFilter | Boolean,\n       ?   randomizeQuestions?: BoolFilter | Boolean,\n       ?   randomizeOptions?: BoolFilter | Boolean,\n       ?   questionOverlapPercentage?: FloatFilter | Float,\n       ?   createdBy?: StringFilter | String,\n       ?   approvedBy?: StringNullableFilter | String | Null,\n       ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n       ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   totalQuestions?: IntNullableFilter | Int | Null,\n       ?   certificates?: CertificateListRelationFilter,\n       ?   attempts?: ExamAttemptListRelationFilter,\n       ?   bookings?: ExamBookingListRelationFilter,\n       ?   questions?: ExamQuestionListRelationFilter,\n       ?   examScores?: ExamScoreListRelationFilter,\n       ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   creator?: UserScalarRelationFilter | UserWhereInput,\n       ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput\n         }\n       })\n\nUnknown argument `examAttempts`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 2)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:1479:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:867:25)","timestamp":"2025-08-05 05:01:28"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.examCategory.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:36:50\n\n  33 } = examData;\n  34 \n  35 // Validate exam category exists\n→ 36 const category = await prisma.examCategory.findUnique({\n       where: {\n         id: undefined,\n     ?   name?: String,\n     ?   AND?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   OR?: ExamCategoryWhereInput[],\n     ?   NOT?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   description?: StringNullableFilter | String | Null,\n     ?   icon?: StringNullableFilter | String | Null,\n     ?   color?: StringNullableFilter | String | Null,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   sortOrder?: IntFilter | Int,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   users?: ExamCategoryUserListRelationFilter,\n     ?   exams?: ExamListRelationFilter,\n     ?   questions?: QuestionListRelationFilter,\n     ?   userPerformances?: UserPerformanceListRelationFilter\n       }\n     })\n\nArgument `where` of type ExamCategoryWhereUniqueInput needs at least one of `id` or `name` arguments. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examCategory.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:36:50\n\n  33 } = examData;\n  34 \n  35 // Validate exam category exists\n→ 36 const category = await prisma.examCategory.findUnique({\n       where: {\n         id: undefined,\n     ?   name?: String,\n     ?   AND?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   OR?: ExamCategoryWhereInput[],\n     ?   NOT?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   description?: StringNullableFilter | String | Null,\n     ?   icon?: StringNullableFilter | String | Null,\n     ?   color?: StringNullableFilter | String | Null,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   sortOrder?: IntFilter | Int,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   users?: ExamCategoryUserListRelationFilter,\n     ?   exams?: ExamListRelationFilter,\n     ?   questions?: QuestionListRelationFilter,\n     ?   userPerformances?: UserPerformanceListRelationFilter\n       }\n     })\n\nArgument `where` of type ExamCategoryWhereUniqueInput needs at least one of `id` or `name` arguments. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:36:24)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-05 05:03:06"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.examCategory.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:36:50\n\n  33 } = examData;\n  34 \n  35 // Validate exam category exists\n→ 36 const category = await prisma.examCategory.findUnique({\n       where: {\n         id: undefined,\n     ?   name?: String,\n     ?   AND?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   OR?: ExamCategoryWhereInput[],\n     ?   NOT?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   description?: StringNullableFilter | String | Null,\n     ?   icon?: StringNullableFilter | String | Null,\n     ?   color?: StringNullableFilter | String | Null,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   sortOrder?: IntFilter | Int,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   users?: ExamCategoryUserListRelationFilter,\n     ?   exams?: ExamListRelationFilter,\n     ?   questions?: QuestionListRelationFilter,\n     ?   userPerformances?: UserPerformanceListRelationFilter\n       }\n     })\n\nArgument `where` of type ExamCategoryWhereUniqueInput needs at least one of `id` or `name` arguments. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examCategory.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:36:50\n\n  33 } = examData;\n  34 \n  35 // Validate exam category exists\n→ 36 const category = await prisma.examCategory.findUnique({\n       where: {\n         id: undefined,\n     ?   name?: String,\n     ?   AND?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   OR?: ExamCategoryWhereInput[],\n     ?   NOT?: ExamCategoryWhereInput | ExamCategoryWhereInput[],\n     ?   description?: StringNullableFilter | String | Null,\n     ?   icon?: StringNullableFilter | String | Null,\n     ?   color?: StringNullableFilter | String | Null,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   sortOrder?: IntFilter | Int,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   users?: ExamCategoryUserListRelationFilter,\n     ?   exams?: ExamListRelationFilter,\n     ?   questions?: QuestionListRelationFilter,\n     ?   userPerformances?: UserPerformanceListRelationFilter\n       }\n     })\n\nArgument `where` of type ExamCategoryWhereUniqueInput needs at least one of `id` or `name` arguments. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:36:24)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:720:22)","timestamp":"2025-08-05 05:03:07"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-05 05:28:13"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 06:57:43"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:00:36"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:00:39"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:01:25"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:09:26"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:09:42"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /auth/login not found","method":"POST","service":"mock-test-api","stack":"Error: Route /auth/login not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 07:11:58","url":"/auth/login","userId":"anonymous"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:18:40"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:19:10"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:21:11"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:21:48"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:22:07"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:22:32"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:23:13"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:24:18"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:25:34"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:27:04"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:27:53"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:29:01"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:29:44"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:30:26"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:31:09"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:32:09"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:32:59"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:33:21"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:34:22"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:35:19"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:36:04"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:36:30"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:37:08"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:37:28"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:38:10"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:39:40"}
{"level":"error","message":"Create question failed Cannot read properties of undefined (reading 'map')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'map')\n    at QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:46:29)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 07:40:33"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:41:19"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 07:41:25"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/exams/cmdyh068w000hi2ev150cakfz/questions not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/exams/cmdyh068w000hi2ev150cakfz/questions not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 07:43:12","url":"/api/v1/admin/exams/cmdyh068w000hi2ev150cakfz/questions","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"level":"error","message":"Approve exam failed examService.approveExam is not a function","service":"mock-test-api","stack":"TypeError: examService.approveExam is not a function\n    at approveExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:884:40)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)","timestamp":"2025-08-05 07:45:45"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 10:28:31"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 10:33:11"}
{"level":"error","message":"Add question to exam failed examService.addQuestionToExam is not a function","service":"mock-test-api","stack":"TypeError: examService.addQuestionToExam is not a function\n    at addQuestionToExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:951:40)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)","timestamp":"2025-08-05 10:38:44"}
{"level":"error","message":"Add question to exam failed examService.addQuestionToExam is not a function","service":"mock-test-api","stack":"TypeError: examService.addQuestionToExam is not a function\n    at addQuestionToExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:951:40)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)","timestamp":"2025-08-05 10:38:44"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df2e4sm905509866b.62 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df2e4sm905509866b.62 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df2e4sm905509866b.62 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-05 10:42:02"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Create user failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df2e4sm905509866b.62 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df2e4sm905509866b.62 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df2e4sm905509866b.62 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-05 10:42:02"}
{"clientVersion":"6.13.0","level":"error","message":"Get questions for attempt failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionRandomizationService.getQuestionsForAttempt (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:20)\n    at async startExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:172:25)","timestamp":"2025-08-05 10:45:37"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionRandomizationService.getQuestionsForAttempt (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:20)\n    at async startExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:172:25)","timestamp":"2025-08-05 10:45:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get questions for attempt failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionRandomizationService.getQuestionsForAttempt (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:20)\n    at async startExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:172:25)","timestamp":"2025-08-05 10:46:15"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam failed \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:38\n\n  709 logger.info('Getting questions for attempt', { attemptId, examId, userId });\n  710 \n  711 // Get the exam to determine question count and category\n→ 712 const exam = await prisma.exam.findUnique({\n        where: {\n          id: \"cmdyncpow000pi2x0kdykxugt\"\n        },\n        select: {\n          questionCount: true,\n          ~~~~~~~~~~~~~\n          examCategoryId: true,\n          questionOverlapPercentage: true,\n      ?   id?: true,\n      ?   title?: true,\n      ?   description?: true,\n      ?   duration?: true,\n      ?   totalMarks?: true,\n      ?   passingMarks?: true,\n      ?   price?: true,\n      ?   currency?: true,\n      ?   isActive?: true,\n      ?   isPublic?: true,\n      ?   allowRetakes?: true,\n      ?   maxRetakes?: true,\n      ?   showResults?: true,\n      ?   showAnswers?: true,\n      ?   randomizeQuestions?: true,\n      ?   randomizeOptions?: true,\n      ?   createdBy?: true,\n      ?   approvedBy?: true,\n      ?   approvedAt?: true,\n      ?   scheduledStart?: true,\n      ?   scheduledEnd?: true,\n      ?   createdAt?: true,\n      ?   updatedAt?: true,\n      ?   totalQuestions?: true,\n      ?   certificates?: true,\n      ?   attempts?: true,\n      ?   bookings?: true,\n      ?   questions?: true,\n      ?   examScores?: true,\n      ?   approver?: true,\n      ?   creator?: true,\n      ?   examCategory?: true,\n      ?   _count?: true\n        }\n      })\n\nUnknown field `questionCount` for select statement on model `Exam`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionRandomizationService.getQuestionsForAttempt (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:712:20)\n    at async startExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:172:25)","timestamp":"2025-08-05 10:46:15"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/essay-scoring not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/essay-scoring not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 10:48:31","url":"/api/v1/admin/essay-scoring","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/essay-scoring not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/essay-scoring not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 10:48:31","url":"/api/v1/admin/essay-scoring","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/essay-scoring not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/essay-scoring not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-05 10:48:31","url":"/api/v1/admin/essay-scoring","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"level":"error","message":"Essay scoring failed text.toLowerCase is not a function","service":"mock-test-api","stack":"TypeError: text.toLowerCase is not a function\n    at EssayScoringService.preprocessText (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:108:8)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:31:40)\n    at testEssayScoringService (/home/ahmadi/Desktop/mock/test_essay_service.js:61:48)\n    at Object.<anonymous> (/home/ahmadi/Desktop/mock/test_essay_service.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1529:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)\n    at Module.load (node:internal/modules/cjs/loader:1275:32)\n    at Module._load (node:internal/modules/cjs/loader:1096:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:164:12)\n    at node:internal/main/run_main_module:28:49","timestamp":"2025-08-05 10:49:41"}
{"level":"error","message":"Essay scoring failed text.toLowerCase is not a function","service":"mock-test-api","stack":"TypeError: text.toLowerCase is not a function\n    at EssayScoringService.preprocessText (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:108:8)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:31:40)\n    at testEssayScoringService (/home/ahmadi/Desktop/mock/test_essay_service.js:61:48)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-05 10:49:41"}
{"level":"error","message":"Essay scoring failed text.toLowerCase is not a function","service":"mock-test-api","stack":"TypeError: text.toLowerCase is not a function\n    at EssayScoringService.preprocessText (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:108:8)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:31:40)\n    at testEssayScoringService (/home/ahmadi/Desktop/mock/test_essay_service.js:61:48)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-05 10:49:41"}
{"level":"error","message":"Essay scoring failed this.assessCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.assessCoherence is not a function\n    at EssayScoringService.assessCoherenceCohesion (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:2781:17)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:88:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testEssayScoringService (/home/ahmadi/Desktop/mock/test_essay_service.js:61:22)","timestamp":"2025-08-05 11:24:34"}
{"level":"error","message":"Essay scoring failed this.assessCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.assessCoherence is not a function\n    at EssayScoringService.assessCoherenceCohesion (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:2781:17)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:88:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testEssayScoringService (/home/ahmadi/Desktop/mock/test_essay_service.js:61:22)","timestamp":"2025-08-05 11:24:34"}
{"level":"error","message":"Essay scoring failed this.assessCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.assessCoherence is not a function\n    at EssayScoringService.assessCoherenceCohesion (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:2781:17)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:88:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testEssayScoringService (/home/ahmadi/Desktop/mock/test_essay_service.js:61:22)","timestamp":"2025-08-05 11:24:34"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/auth/login not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/auth/login not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 11:41:20","url":"/api/auth/login","userId":"anonymous"}
{"clientVersion":"6.13.0","level":"error","message":"Create question failed \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:70:46\n\n  67 }\n  68 \n  69 // Create question\n→ 70 const question = await prisma.question.create({\n       data: {\n         text: \"Explain the concept of Object-Oriented Programming (OOP) and discuss its four main principles with examples.\",\n         type: \"ESSAY\",\n         difficulty: \"INTERMEDIATE\",\n                     ~~~~~~~~~~~~~~\n         marks: 15,\n         timeLimit: undefined,\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-05T16:06:50.611Z\")\n       },\n       include: {\n         options: true,\n         images: true,\n         exam_categories: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `difficulty`. Expected QuestionDifficulty.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:70:46\n\n  67 }\n  68 \n  69 // Create question\n→ 70 const question = await prisma.question.create({\n       data: {\n         text: \"Explain the concept of Object-Oriented Programming (OOP) and discuss its four main principles with examples.\",\n         type: \"ESSAY\",\n         difficulty: \"INTERMEDIATE\",\n                     ~~~~~~~~~~~~~~\n         marks: 15,\n         timeLimit: undefined,\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n         updatedAt: new Date(\"2025-08-05T16:06:50.611Z\")\n       },\n       include: {\n         options: true,\n         images: true,\n         exam_categories: {\n           select: {\n             name: true\n           }\n         }\n       }\n     })\n\nInvalid value for argument `difficulty`. Expected QuestionDifficulty.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.createQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:70:24)\n    at async createQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:535:22)","timestamp":"2025-08-05 12:06:50"}
{"clientVersion":"6.13.0","level":"error","message":"Delete question failed \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:300:46\n\n  297  */\n  298 async deleteQuestion(questionId, deletedBy) {\n  299   try {\n→ 300     const question = await prisma.question.findUnique({\n            where: {\n              id: \"cmdyqh5fe0005i207du7wh5i9\"\n            },\n            include: {\n              _count: {\n                select: {\n                  questionResponses: true,\n                  ~~~~~~~~~~~~~~~~~\n          ?       examQuestions?: true,\n          ?       images?: true,\n          ?       options?: true,\n          ?       responses?: true,\n          ?       scores?: true,\n          ?       tags?: true\n                }\n              }\n            }\n          })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findUnique()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:300:46\n\n  297  */\n  298 async deleteQuestion(questionId, deletedBy) {\n  299   try {\n→ 300     const question = await prisma.question.findUnique({\n            where: {\n              id: \"cmdyqh5fe0005i207du7wh5i9\"\n            },\n            include: {\n              _count: {\n                select: {\n                  questionResponses: true,\n                  ~~~~~~~~~~~~~~~~~\n          ?       examQuestions?: true,\n          ?       images?: true,\n          ?       options?: true,\n          ?       responses?: true,\n          ?       scores?: true,\n          ?       tags?: true\n                }\n              }\n            }\n          })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionService.deleteQuestion (/home/ahmadi/Desktop/mock/src/services/questionService.js:300:24)\n    at async deleteQuestion (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:685:22)","timestamp":"2025-08-05 12:08:20"}
{"attemptId":"cmdyqwlri0007i24ugwpnodif","error":"Assignment to constant variable.","level":"error","message":"Complete exam attempt failed","service":"mock-test-api","stack":"TypeError: Assignment to constant variable.\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:688:17)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-05 12:20:21","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-05 12:21:05"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 12:21:26"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-05 12:22:36"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-05 12:25:07","url":"/api/v1/health","userId":"anonymous"}
{"level":"error","message":"Add question to exam failed examService.addQuestionToExam is not a function","service":"mock-test-api","stack":"TypeError: examService.addQuestionToExam is not a function\n    at addQuestionToExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:951:40)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)","timestamp":"2025-08-05 13:46:27"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:232:5)","timestamp":"2025-08-06 00:01:28"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-06 00:07:11"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:21:27"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:21:27"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:22:13"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:22:13"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:23:37"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:23:37"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:27:46"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1044:42)","timestamp":"2025-08-06 00:27:46"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1060:42)","timestamp":"2025-08-06 00:28:18"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1060:42)","timestamp":"2025-08-06 00:28:18"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1060:42)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:968:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:665:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 00:28:57"}
{"level":"error","message":"Essay answer checking failed scoringResult.feedback.join is not a function","service":"mock-test-api","stack":"TypeError: scoringResult.feedback.join is not a function\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1060:42)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:968:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:665:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 00:28:57"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"Test Exam with Question Distribution\",\n         description: \"This is a test exam to verify question type distribution functionality\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 2,\n         multipleChoiceQuestionsCount: 5,\n         shortAnswerQuestionsCount: 2,\n         fillInTheBlankQuestionsCount: 1,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"Test Exam with Question Distribution\",\n         description: \"This is a test exam to verify question type distribution functionality\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 2,\n         multipleChoiceQuestionsCount: 5,\n         shortAnswerQuestionsCount: 2,\n         fillInTheBlankQuestionsCount: 1,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-06 01:11:16"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"Quick Test Exam\",\n         description: \"A test exam created quickly\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 30,\n         totalQuestions: 5,\n         totalMarks: 100,\n         passingMarks: 50,\n         currency: \"USD\",\n         isPublic: true,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 2,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 1,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   price: Decimal\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `price` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"Quick Test Exam\",\n         description: \"A test exam created quickly\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 30,\n         totalQuestions: 5,\n         totalMarks: 100,\n         passingMarks: 50,\n         currency: \"USD\",\n         isPublic: true,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 2,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 1,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   price: Decimal\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `price` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-06 01:29:05"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"Quick Test Exam\",\n         description: \"A test exam created quickly\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 30,\n         totalQuestions: 5,\n         totalMarks: 100,\n         passingMarks: 50,\n         currency: \"USD\",\n         isPublic: true,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 2,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 1,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   price: Decimal\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `price` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"Quick Test Exam\",\n         description: \"A test exam created quickly\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 30,\n         totalQuestions: 5,\n         totalMarks: 100,\n         passingMarks: 50,\n         currency: \"USD\",\n         isPublic: true,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 2,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 1,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   price: Decimal\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `price` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-06 01:29:33"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/exams/attempts/cmdzjuwh5000pi2xekznfesdl/submit-response not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/exams/attempts/cmdzjuwh5000pi2xekznfesdl/submit-response not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-06 01:50:51","url":"/api/v1/exams/attempts/cmdzjuwh5000pi2xekznfesdl/submit-response","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Essay scoring failed this.calculateSemanticSimilarity is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticSimilarity is not a function\n    at EssayScoringService.detectOffTopicAnswer (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:177:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:35:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 01:53:34"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.calculateSemanticSimilarity is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.calculateSemanticSimilarity is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:139:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 01:53:34"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-06 02:05:09"}
{"level":"error","message":"Essay scoring failed this.detectGibberish is not a function","service":"mock-test-api","stack":"TypeError: this.detectGibberish is not a function\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:3977:33)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:35:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.detectGibberish is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.detectGibberish is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:139:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay scoring failed this.detectGibberish is not a function","service":"mock-test-api","stack":"TypeError: this.detectGibberish is not a function\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:3977:33)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:35:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.detectGibberish is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.detectGibberish is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:139:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay scoring failed this.detectGibberish is not a function","service":"mock-test-api","stack":"TypeError: this.detectGibberish is not a function\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:3977:33)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:35:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.detectGibberish is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.detectGibberish is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:139:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay scoring failed this.detectGibberish is not a function","service":"mock-test-api","stack":"TypeError: this.detectGibberish is not a function\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:3977:33)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:35:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.detectGibberish is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.detectGibberish is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:139:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:08:05"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:17:59"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:17:59"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:24:41"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:24:41"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:24:41"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:24:41"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/exams/cmdyncpow000pi2x0kdykxugt not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/exams/cmdyncpow000pi2x0kdykxugt not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-06 02:29:44","url":"/api/v1/admin/exams/cmdyncpow000pi2x0kdykxugt","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:31:17"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:31:17"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:31:17"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:31:17"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:35:44"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:35:44"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:35:44"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:35:44"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:37:12"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:37:12"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:39:07"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:39:07"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:39:07"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:39:07"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:39:35"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1083:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:39:35"}
{"clientVersion":"6.13.0","code":"P2003","level":"error","message":"Failed to log question selection \nInvalid `prisma.auditLog.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:691:29\n\n  688 });\n  689 \n  690 // Log to audit log\n→ 691 await prisma.auditLog.create(\nForeign key constraint violated on the constraint: `audit_logs_userId_fkey`","meta":{"constraint":"audit_logs_userId_fkey","modelName":"AuditLog"},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.auditLog.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:691:29\n\n  688 });\n  689 \n  690 // Log to audit log\n→ 691 await prisma.auditLog.create(\nForeign key constraint violated on the constraint: `audit_logs_userId_fkey`\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async QuestionRandomizationService.logQuestionSelection (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:691:7)\n    at async QuestionRandomizationService.generateRandomQuestions (/home/ahmadi/Desktop/mock/src/services/questionRandomizationService.js:280:7)\n    at async testQuestionRandomizerDirectly (/home/ahmadi/Desktop/mock/test_question_randomizer_directly.js:10:23)","timestamp":"2025-08-06 02:46:55"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1094:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:49:03"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1094:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:49:03"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1094:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:52:17"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1094:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:52:17"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1094:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:52:17"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1094:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1001:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:698:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 02:52:17"}
{"attemptId":"cmdzm5de10007i2evv1e7zi8q","level":"error","message":"Attempt is not in progress","service":"mock-test-api","status":"COMPLETED","timestamp":"2025-08-06 02:57:24"}
{"attemptId":"cmdzm5de10007i2evv1e7zi8q","level":"error","message":"Attempt is not in progress","service":"mock-test-api","status":"COMPLETED","timestamp":"2025-08-06 02:57:30"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at testEssayScoringDirectly (/home/ahmadi/Desktop/mock/test_essay_scoring_directly.js:28:46)\n    at Object.<anonymous> (/home/ahmadi/Desktop/mock/test_essay_scoring_directly.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1529:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)\n    at Module.load (node:internal/modules/cjs/loader:1275:32)\n    at Module._load (node:internal/modules/cjs/loader:1096:12)","timestamp":"2025-08-06 03:26:11"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at testEssayScoringDirectly (/home/ahmadi/Desktop/mock/test_essay_scoring_directly.js:28:46)\n    at Object.<anonymous> (/home/ahmadi/Desktop/mock/test_essay_scoring_directly.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1529:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)\n    at Module.load (node:internal/modules/cjs/loader:1275:32)\n    at Module._load (node:internal/modules/cjs/loader:1096:12)","timestamp":"2025-08-06 03:26:23"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:26:27"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:26:27"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:26:27"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:26:27"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:27:57"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:27:57"}
{"level":"error","message":"Essay scoring failed set1.filter is not a function","service":"mock-test-api","stack":"TypeError: set1.filter is not a function\n    at EssayScoringService.calculateJaccardSimilarity (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:1271:31)\n    at EssayScoringService.analyzeSemanticSimilarityAdvanced (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4101:36)\n    at EssayScoringService.detectCompletelyOffTopic (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4038:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:62:36)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:27:57"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: set1.filter is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: set1.filter is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:166:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1134:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1041:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 03:27:57"}
{"date":"Wed Aug 06 2025 04:48:55 GMT-0400 (Eastern Daylight Time)","error":{},"level":"error","message":"unhandledRejection: EssayScoringService is not a constructor\nTypeError: EssayScoringService is not a constructor\n    at debugEssayLayers (/home/ahmadi/Desktop/mock/debug_essay_layers.js:4:31)\n    at Object.<anonymous> (/home/ahmadi/Desktop/mock/debug_essay_layers.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1529:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)\n    at Module.load (node:internal/modules/cjs/loader:1275:32)\n    at Module._load (node:internal/modules/cjs/loader:1096:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:164:12)\n    at node:internal/main/run_main_module:28:49","os":{"loadavg":[2.24,3.05,2.62],"uptime":17341.67},"process":{"argv":["/usr/bin/node","/home/ahmadi/Desktop/mock/debug_essay_layers.js"],"cwd":"/home/ahmadi/Desktop/mock","execPath":"/usr/bin/node","gid":1000,"memoryUsage":{"arrayBuffers":18311790,"external":21480041,"heapTotal":101232640,"heapUsed":81829424,"rss":165617664},"pid":348849,"uid":1000,"version":"v20.19.4"},"rejection":true,"service":"mock-test-api","stack":"TypeError: EssayScoringService is not a constructor\n    at debugEssayLayers (/home/ahmadi/Desktop/mock/debug_essay_layers.js:4:31)\n    at Object.<anonymous> (/home/ahmadi/Desktop/mock/debug_essay_layers.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1529:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)\n    at Module.load (node:internal/modules/cjs/loader:1275:32)\n    at Module._load (node:internal/modules/cjs/loader:1096:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:164:12)\n    at node:internal/main/run_main_module:28:49","timestamp":"2025-08-06 04:48:55","trace":[{"column":31,"file":"/home/ahmadi/Desktop/mock/debug_essay_layers.js","function":"debugEssayLayers","line":4,"method":null,"native":false},{"column":1,"file":"/home/ahmadi/Desktop/mock/debug_essay_layers.js","function":null,"line":71,"method":null,"native":false},{"column":14,"file":"node:internal/modules/cjs/loader","function":"Module._compile","line":1529,"method":"_compile","native":false},{"column":10,"file":"node:internal/modules/cjs/loader","function":"Module._extensions..js","line":1613,"method":".js","native":false},{"column":32,"file":"node:internal/modules/cjs/loader","function":"Module.load","line":1275,"method":"load","native":false},{"column":12,"file":"node:internal/modules/cjs/loader","function":"Module._load","line":1096,"method":"_load","native":false},{"column":12,"file":"node:internal/modules/run_main","function":"Function.executeUserEntryPoint [as runMain]","line":164,"method":"executeUserEntryPoint [as runMain]","native":false},{"column":49,"file":"node:internal/main/run_main_module","function":null,"line":28,"method":null,"native":false}]}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:543:38\n\n  540 try {\n  541   const { firstName, lastName, phone, dateOfBirth, gender } = req.body;\n  542 \n→ 543   const user = await prisma.user.update({\n          where: {\n            id: \"cmdw3a9vs0000i2jijo7g0t4t\"\n          },\n          data: {\n            firstName: \"Super\",\n            lastName: \"Admin\",\n            phone: \"077777777777\",\n            dateOfBirth: new Date(\"2025-08-07T00:00:00.000Z\"),\n            gender: \"Male\"\n                    ~~~~~~\n          },\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true,\n            phone: true,\n            dateOfBirth: true,\n            gender: true,\n            profileImage: true,\n            role: true,\n            isEmailVerified: true,\n            updatedAt: true\n          }\n        })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:543:38\n\n  540 try {\n  541   const { firstName, lastName, phone, dateOfBirth, gender } = req.body;\n  542 \n→ 543   const user = await prisma.user.update({\n          where: {\n            id: \"cmdw3a9vs0000i2jijo7g0t4t\"\n          },\n          data: {\n            firstName: \"Super\",\n            lastName: \"Admin\",\n            phone: \"077777777777\",\n            dateOfBirth: new Date(\"2025-08-07T00:00:00.000Z\"),\n            gender: \"Male\"\n                    ~~~~~~\n          },\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true,\n            phone: true,\n            dateOfBirth: true,\n            gender: true,\n            profileImage: true,\n            role: true,\n            isEmailVerified: true,\n            updatedAt: true\n          }\n        })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:543:20)","timestamp":"2025-08-06 06:15:48"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:543:38\n\n  540 try {\n  541   const { firstName, lastName, phone, dateOfBirth, gender } = req.body;\n  542 \n→ 543   const user = await prisma.user.update({\n          where: {\n            id: \"cmdw3a9vs0000i2jijo7g0t4t\"\n          },\n          data: {\n            firstName: \"Super\",\n            lastName: \"Admin\",\n            phone: \"077777777777\",\n            dateOfBirth: new Date(\"2025-08-07T00:00:00.000Z\"),\n            gender: \"Male\"\n                    ~~~~~~\n          },\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true,\n            phone: true,\n            dateOfBirth: true,\n            gender: true,\n            profileImage: true,\n            role: true,\n            isEmailVerified: true,\n            updatedAt: true\n          }\n        })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:543:38\n\n  540 try {\n  541   const { firstName, lastName, phone, dateOfBirth, gender } = req.body;\n  542 \n→ 543   const user = await prisma.user.update({\n          where: {\n            id: \"cmdw3a9vs0000i2jijo7g0t4t\"\n          },\n          data: {\n            firstName: \"Super\",\n            lastName: \"Admin\",\n            phone: \"077777777777\",\n            dateOfBirth: new Date(\"2025-08-07T00:00:00.000Z\"),\n            gender: \"Male\"\n                    ~~~~~~\n          },\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true,\n            phone: true,\n            dateOfBirth: true,\n            gender: true,\n            profileImage: true,\n            role: true,\n            isEmailVerified: true,\n            updatedAt: true\n          }\n        })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:543:20)","timestamp":"2025-08-06 06:15:54"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:31:51"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:31:51"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:31:51"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:31:51"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:20"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:21"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:21"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:24"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:24"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:24"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:24"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:24"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:24"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:25"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:25"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:25"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:25"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:25"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:25"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:29"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:29"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:29"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:29"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:29"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:29"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:30"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:30"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:30"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:30"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:31"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:31"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:31"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:31"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:31"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:31"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:36"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:36"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:37"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:37"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:39"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:39"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:40"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:40"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:41"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:41"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:42"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:33:42"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:02"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:02"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:03"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:03"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:04"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:04"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:05"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:05"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:07"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:07"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:08"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:08"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:12"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:12"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:13"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:13"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:14"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:14"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:16"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:16"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:17"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:17"}
{"level":"error","message":"Essay scoring failed this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:42:39)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:18"}
{"level":"error","message":"Essay answer checking failed Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function","service":"mock-test-api","stack":"Error: Failed to score essay: this.analyzeUltraDeepContentAccuracy is not a function\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:140:13)\n    at ExamService.checkEssayAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1147:55)\n    at async ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:1054:18)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:712:36)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 06:34:18"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-06 06:53:33"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:232:5)","timestamp":"2025-08-06 07:05:53"}
{"attemptId":"cmdzv93iu000hi2ys9zegv7u7","error":"\nInvalid `prisma.questionResponse.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:721:69\n\n  718   feedback: answerResult.feedback\n  719 });\n  720 \n→ 721 const createdResponse = await prisma.questionResponse.create(\nUnique constraint failed on the fields: (`attemptId`,`questionId`)","level":"error","message":"Complete exam attempt failed","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.questionResponse.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:721:69\n\n  718   feedback: answerResult.feedback\n  719 });\n  720 \n→ 721 const createdResponse = await prisma.questionResponse.create(\nUnique constraint failed on the fields: (`attemptId`,`questionId`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:721:39)\n    at async completeExam (/home/ahmadi/Desktop/mock/src/controllers/examController.js:297:22)","timestamp":"2025-08-06 07:15:30","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Export data failed Invalid export type","service":"mock-test-api","stack":"Error: Invalid export type\n    at AdminService.exportData (/home/ahmadi/Desktop/mock/src/services/adminService.js:226:17)\n    at exportData (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:1065:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-06 08:15:37"}
{"level":"error","message":"Export data failed Invalid export type","service":"mock-test-api","stack":"Error: Invalid export type\n    at AdminService.exportData (/home/ahmadi/Desktop/mock/src/services/adminService.js:226:17)\n    at exportData (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:1065:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-06 08:15:37"}
{"level":"error","message":"Export data failed Invalid export type","service":"mock-test-api","stack":"Error: Invalid export type\n    at AdminService.exportData (/home/ahmadi/Desktop/mock/src/services/adminService.js:226:17)\n    at exportData (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:1065:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-06 08:15:38"}
{"level":"error","message":"Export data failed Invalid export type","service":"mock-test-api","stack":"Error: Invalid export type\n    at AdminService.exportData (/home/ahmadi/Desktop/mock/src/services/adminService.js:226:17)\n    at exportData (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:1065:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)","timestamp":"2025-08-06 08:15:38"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-06 08:33:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:56"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:22:56"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:23:00"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:23:00"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:587:28\n\n  584 }\n  585 \n  586 const [bookings, total] = await Promise.all([\n→ 587   prisma.examBooking.findMany({\n          where: {\n            status: [\n              \"PENDING\",\n              \"CONFIRMED\"\n            ]\n            ~~~~~~~~~~~~~\n          },\n          include: {\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            },\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            payment: true,\n            attempts: {\n              orderBy: {\n                createdAt: \"desc\"\n              },\n              take: 1\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 10\n        })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:41"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:24:41"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/essay-scoring/score not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/essay-scoring/score not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:28:33","url":"/api/v1/essay-scoring/score","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/essay-scoring/score not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/essay-scoring/score not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:28:33","url":"/api/v1/essay-scoring/score","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/essay-scoring/score not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/essay-scoring/score not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:28:33","url":"/api/v1/essay-scoring/score","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/essay-scoring/score not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/essay-scoring/score not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:28:33","url":"/api/v1/essay-scoring/score","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/essay-scoring/score not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/essay-scoring/score not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:28:33","url":"/api/v1/essay-scoring/score","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/essay-scoring/score not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/essay-scoring/score not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:28:33","url":"/api/v1/essay-scoring/score","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/exams not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/exams not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-07 00:32:16","url":"/api/v1/exams","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get all bookings failed \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examBooking.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examBookingService.js:613:28\n\n  610   skip,\n  611   take: limit\n  612 }),\n→ 613 prisma.examBooking.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          status: [\n            \"PENDING\",\n            \"CONFIRMED\"\n          ]\n          ~~~~~~~~~~~~~\n        }\n      })\n\nArgument `status`: Invalid value provided. Expected EnumBookingStatusFilter or BookingStatus, provided (String, String).\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamBookingService.getAllBookings (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:586:33)\n    at async getAllBookings (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:485:24)","timestamp":"2025-08-07 00:33:59"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 00:40:49"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 00:40:49"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 00:40:49"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 00:40:49"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 00:40:49"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 00:40:49"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:42:22","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:44:55","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:44:56","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:44:59","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:03","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:06","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:07","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:09","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:14","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:21","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:22","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:24","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:30","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:45:43","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:46:23","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:46:35","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:46:47","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:46:55","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:47:25","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:47:38","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:16","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:17","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:20","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:24","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:37","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:39","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:48:41","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:49:01","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:49:03","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:49:05","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 00:49:09","url":"/api/v1/tasks?status[]=pending&status[]=in_progress&type=testing&limit=10&sortBy=dueDate&sortOrder=asc","userId":"anonymous"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticConceptAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticConceptAlignment is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:03:15"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticConceptAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticConceptAlignment is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:03:15"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticConceptAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticConceptAlignment is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:03:15"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticConceptAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticConceptAlignment is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:03:15"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticConceptAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticConceptAlignment is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:03:15"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticConceptAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticConceptAlignment is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:03:15"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6292:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:08:38"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6292:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:08:38"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6292:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:08:38"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6292:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:08:38"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6292:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:08:39"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6292:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4265:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:08:39"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6589:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:16:04"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6589:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:16:04"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6589:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:16:04"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6589:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:16:04"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6589:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:16:05"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.extractCoreConcepts is not a function","service":"mock-test-api","stack":"TypeError: this.extractCoreConcepts is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6589:34)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:16:05"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.calculateSemanticAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticAlignment is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6598:32)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:25:29"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.calculateSemanticAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticAlignment is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6598:32)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:25:29"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.calculateSemanticAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticAlignment is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6598:32)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:25:29"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.calculateSemanticAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticAlignment is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6598:32)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:25:29"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.calculateSemanticAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticAlignment is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6598:32)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:25:29"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.calculateSemanticAlignment is not a function","service":"mock-test-api","stack":"TypeError: this.calculateSemanticAlignment is not a function\n    at EssayScoringService.analyzeSemanticConceptAlignment (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:6598:32)\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4269:37)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:25:29"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeContextualUnderstanding is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeContextualUnderstanding is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:44)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:30:16"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeContextualUnderstanding is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeContextualUnderstanding is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:44)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:30:16"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeContextualUnderstanding is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeContextualUnderstanding is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:44)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:30:16"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeContextualUnderstanding is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeContextualUnderstanding is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:44)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:30:16"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeContextualUnderstanding is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeContextualUnderstanding is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:44)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:30:16"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeContextualUnderstanding is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeContextualUnderstanding is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4284:44)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:30:16"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4289:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:35:41"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4289:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:35:41"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4289:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:35:42"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4289:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:35:42"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4289:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:35:42"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.analyzeSemanticCoherence is not a function","service":"mock-test-api","stack":"TypeError: this.analyzeSemanticCoherence is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4289:38)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:35:42"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.generateSemanticFeedback is not a function","service":"mock-test-api","stack":"TypeError: this.generateSemanticFeedback is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4297:24)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:37:47"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.generateSemanticFeedback is not a function","service":"mock-test-api","stack":"TypeError: this.generateSemanticFeedback is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4297:24)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:37:47"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.generateSemanticFeedback is not a function","service":"mock-test-api","stack":"TypeError: this.generateSemanticFeedback is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4297:24)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:37:47"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.generateSemanticFeedback is not a function","service":"mock-test-api","stack":"TypeError: this.generateSemanticFeedback is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4297:24)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:37:47"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.generateSemanticFeedback is not a function","service":"mock-test-api","stack":"TypeError: this.generateSemanticFeedback is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4297:24)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:37:47"}
{"level":"error","message":"Intelligent semantic understanding analysis failed this.generateSemanticFeedback is not a function","service":"mock-test-api","stack":"TypeError: this.generateSemanticFeedback is not a function\n    at EssayScoringService.analyzeIntelligentSemanticUnderstanding (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:4297:24)\n    at EssayScoringService.scoreEssay (/home/ahmadi/Desktop/mock/src/services/essayScoringService.js:45:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async testAlgorithmDirect (/home/ahmadi/Desktop/mock/test_algorithm_direct.js:41:24)","timestamp":"2025-08-07 01:37:47"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dsad\",\n         description: \"qdasd\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-13T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-14T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 1,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dsad\",\n         description: \"qdasd\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-13T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-14T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 1,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:55:07"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dsad\",\n         description: \"qdasd\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-13T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-14T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 1,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dsad\",\n         description: \"qdasd\",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-13T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-14T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 1,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:55:08"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:56:02"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:56:03"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:56:35"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf\",\n         description: \"asdfadsfasd\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:56:36"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf dss\",\n         description: \"asdfadsfasd dsfcds\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf dss\",\n         description: \"asdfadsfasd dsfcds\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:58:02"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf dss\",\n         description: \"asdfadsfasd dsfcds\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"dasfsdf dss\",\n         description: \"asdfadsfasd dsfcds\",\n         examCategoryId: \"cmdwoww7n0004i2es314wu1o2\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-11T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-13T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 01:58:04"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:01:13"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:01:14"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:01:18"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:01:19"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:02:02"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:02:03"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:02:37"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:02:38"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:03:50"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:03:51"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:04:43"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 20,\n         passingMarks: undefined,\n         price: 0,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 3,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: new Date(\"2025-08-10T00:00:00.000Z\"),\n         scheduledEnd: new Date(\"2025-08-11T00:00:00.000Z\"),\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 2,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:04:44"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:06:55"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd \",\n         description: \"asdfasdfasd \",\n         examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:06:56"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd  dsafd\",\n         description: \"asdfasdfasd sadfadsf\",\n         examCategoryId: \"cat_005\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd  dsafd\",\n         description: \"asdfasdfasd sadfadsf\",\n         examCategoryId: \"cat_005\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:09:03"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd  dsafd\",\n         description: \"asdfasdfasd sadfadsf\",\n         examCategoryId: \"cat_005\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:59:38\n\n  56 }\n  57 \n  58 // Create exam\n→ 59 const exam = await prisma.exam.create({\n       data: {\n         title: \"adsfasd  dsafd\",\n         description: \"asdfasdfasd sadfadsf\",\n         examCategoryId: \"cat_005\",\n         duration: 60,\n         totalQuestions: 10,\n         passingMarks: undefined,\n         price: undefined,\n         currency: \"USD\",\n         isPublic: false,\n         isActive: true,\n         allowRetakes: false,\n         maxRetakes: 1,\n         showResults: true,\n         showAnswers: false,\n         randomizeQuestions: true,\n         randomizeOptions: true,\n         questionOverlapPercentage: 10,\n         scheduledStart: null,\n         scheduledEnd: null,\n         essayQuestionsCount: 0,\n         multipleChoiceQuestionsCount: 0,\n         shortAnswerQuestionsCount: 0,\n         fillInTheBlankQuestionsCount: 0,\n         trueFalseQuestionsCount: 0,\n         matchingQuestionsCount: 0,\n         orderingQuestionsCount: 0,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     +   totalMarks: Int\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nArgument `totalMarks` is missing.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:59:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:766:22)","timestamp":"2025-08-07 02:09:04"}
{"clientVersion":"6.13.0","level":"error","message":"Update exam failed \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:273:45\n\n  270   return { success: false, message: 'Exam not found' };\n  271 }\n  272 \n→ 273 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cme101hdf0005i284hanhk16s\"\n        },\n        data: {\n          title: \"dsafds dsfasd\",\n          description: \"sdafadsf adfsa adsfa dsfb \",\n          examCategoryId: \"cat_001\",\n          ~~~~~~~~~~~~~~\n          duration: 60,\n          totalQuestions: 10,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: false,\n          startDate: \"\",\n          endDate: \"\",\n          price: 0.15,\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:12:16.092Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledStart?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledEnd?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:273:45\n\n  270   return { success: false, message: 'Exam not found' };\n  271 }\n  272 \n→ 273 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cme101hdf0005i284hanhk16s\"\n        },\n        data: {\n          title: \"dsafds dsfasd\",\n          description: \"sdafadsf adfsa adsfa dsfb \",\n          examCategoryId: \"cat_001\",\n          ~~~~~~~~~~~~~~\n          duration: 60,\n          totalQuestions: 10,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: false,\n          startDate: \"\",\n          endDate: \"\",\n          price: 0.15,\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:12:16.092Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledStart?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledEnd?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.updateExam (/home/ahmadi/Desktop/mock/src/services/examService.js:273:27)\n    at async updateExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:826:22)","timestamp":"2025-08-07 02:12:16"}
{"clientVersion":"6.13.0","level":"error","message":"Update exam failed \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:273:45\n\n  270   return { success: false, message: 'Exam not found' };\n  271 }\n  272 \n→ 273 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cme101hdf0005i284hanhk16s\"\n        },\n        data: {\n          title: \"dsafds dsfasd\",\n          description: \"sdafadsf adfsa adsfa dsfb \",\n          examCategoryId: \"cat_001\",\n          ~~~~~~~~~~~~~~\n          duration: 60,\n          totalQuestions: 10,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: false,\n          startDate: \"\",\n          endDate: \"\",\n          price: 0.15,\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:12:17.153Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledStart?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledEnd?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:273:45\n\n  270   return { success: false, message: 'Exam not found' };\n  271 }\n  272 \n→ 273 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cme101hdf0005i284hanhk16s\"\n        },\n        data: {\n          title: \"dsafds dsfasd\",\n          description: \"sdafadsf adfsa adsfa dsfb \",\n          examCategoryId: \"cat_001\",\n          ~~~~~~~~~~~~~~\n          duration: 60,\n          totalQuestions: 10,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: false,\n          startDate: \"\",\n          endDate: \"\",\n          price: 0.15,\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:12:17.153Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledStart?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   scheduledEnd?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.updateExam (/home/ahmadi/Desktop/mock/src/services/examService.js:273:27)\n    at async updateExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:826:22)","timestamp":"2025-08-07 02:12:17"}
{"clientVersion":"6.13.0","level":"error","message":"Update exam failed \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:309:45\n\n  306   processedUpdateData.scheduledEnd = new Date(updateData.scheduledEnd);\n  307 }\n  308 \n→ 309 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cmdyn9xcj000di2x0xc87lgfg\"\n        },\n        data: {\n          title: \"Advanced Essay Assessment Test\",\n          description: \"A comprehensive test to evaluate essay scoring algorithms with multiple analysis layers\",\n          examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n          ~~~~~~~~~~~~~~\n          duration: 120,\n          totalQuestions: 2,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: true,\n          scheduledStart: new Date(\"2025-08-19T00:00:00.000Z\"),\n          scheduledEnd: new Date(\"2025-08-21T00:00:00.000Z\"),\n          price: \"0\",\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:34:32.071Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:309:45\n\n  306   processedUpdateData.scheduledEnd = new Date(updateData.scheduledEnd);\n  307 }\n  308 \n→ 309 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cmdyn9xcj000di2x0xc87lgfg\"\n        },\n        data: {\n          title: \"Advanced Essay Assessment Test\",\n          description: \"A comprehensive test to evaluate essay scoring algorithms with multiple analysis layers\",\n          examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n          ~~~~~~~~~~~~~~\n          duration: 120,\n          totalQuestions: 2,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: true,\n          scheduledStart: new Date(\"2025-08-19T00:00:00.000Z\"),\n          scheduledEnd: new Date(\"2025-08-21T00:00:00.000Z\"),\n          price: \"0\",\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:34:32.071Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.updateExam (/home/ahmadi/Desktop/mock/src/services/examService.js:309:27)\n    at async updateExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:826:22)","timestamp":"2025-08-07 02:34:32"}
{"clientVersion":"6.13.0","level":"error","message":"Update exam failed \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:309:45\n\n  306   processedUpdateData.scheduledEnd = new Date(updateData.scheduledEnd);\n  307 }\n  308 \n→ 309 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cmdyn9xcj000di2x0xc87lgfg\"\n        },\n        data: {\n          title: \"Advanced Essay Assessment Test\",\n          description: \"A comprehensive test to evaluate essay scoring algorithms with multiple analysis layers\",\n          examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n          ~~~~~~~~~~~~~~\n          duration: 120,\n          totalQuestions: 2,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: true,\n          scheduledStart: new Date(\"2025-08-19T00:00:00.000Z\"),\n          scheduledEnd: new Date(\"2025-08-21T00:00:00.000Z\"),\n          price: \"0\",\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:34:33.149Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:309:45\n\n  306   processedUpdateData.scheduledEnd = new Date(updateData.scheduledEnd);\n  307 }\n  308 \n→ 309 const updatedExam = await prisma.exam.update({\n        where: {\n          id: \"cmdyn9xcj000di2x0xc87lgfg\"\n        },\n        data: {\n          title: \"Advanced Essay Assessment Test\",\n          description: \"A comprehensive test to evaluate essay scoring algorithms with multiple analysis layers\",\n          examCategoryId: \"cmdyb4pji0000i2ovlel4fmju\",\n          ~~~~~~~~~~~~~~\n          duration: 120,\n          totalQuestions: 2,\n          passingScore: 70,\n          difficulty: \"EASY\",\n          status: \"DRAFT\",\n          instructions: \"\",\n          maxAttempts: 3,\n          isPublic: true,\n          scheduledStart: new Date(\"2025-08-19T00:00:00.000Z\"),\n          scheduledEnd: new Date(\"2025-08-21T00:00:00.000Z\"),\n          price: \"0\",\n          currency: \"USD\",\n          essayQuestionsCount: 0,\n          multipleChoiceQuestionsCount: 0,\n          shortAnswerQuestionsCount: 0,\n          fillInTheBlankQuestionsCount: 0,\n          trueFalseQuestionsCount: 0,\n          matchingQuestionsCount: 0,\n          orderingQuestionsCount: 0,\n          updatedAt: new Date(\"2025-08-07T06:34:33.149Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   passingMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   isActive?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   allowRetakes?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   maxRetakes?: Int | IntFieldUpdateOperationsInput,\n      ?   showResults?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   showAnswers?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeQuestions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   randomizeOptions?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   questionOverlapPercentage?: Float | FloatFieldUpdateOperationsInput,\n      ?   approvedAt?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   certificates?: CertificateUpdateManyWithoutExamNestedInput,\n      ?   attempts?: ExamAttemptUpdateManyWithoutExamNestedInput,\n      ?   bookings?: ExamBookingUpdateManyWithoutExamNestedInput,\n      ?   questions?: ExamQuestionUpdateManyWithoutExamNestedInput,\n      ?   examScores?: ExamScoreUpdateManyWithoutExamNestedInput,\n      ?   approver?: UserUpdateOneWithoutApprovedExamsNestedInput,\n      ?   creator?: UserUpdateOneRequiredWithoutCreatedExamsNestedInput,\n      ?   examCategory?: ExamCategoryUpdateOneRequiredWithoutExamsNestedInput\n        },\n        include: {\n          examCategory: {\n            select: {\n              name: true,\n              color: true\n            }\n          }\n        }\n      })\n\nUnknown argument `examCategoryId`. Did you mean `examCategory`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.updateExam (/home/ahmadi/Desktop/mock/src/services/examService.js:309:27)\n    at async updateExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:826:22)","timestamp":"2025-08-07 02:34:33"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-07 02:59:39"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 03:00:25","url":"/api/v1/health","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:113:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-07 03:00:36","url":"/api/v1/health","userId":"anonymous"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:09:59"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:10:00"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:14:29"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:14:30"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:15:24"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:15:25"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:15:50"}
{"level":"error","message":"Registration failed validateRegistration is not a function","service":"mock-test-api","stack":"TypeError: validateRegistration is not a function\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:15:51"}
{"level":"error","message":"Registration failed validateRegistration is not defined","service":"mock-test-api","stack":"ReferenceError: validateRegistration is not defined\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:17:42"}
{"level":"error","message":"Registration failed validateRegistration is not defined","service":"mock-test-api","stack":"ReferenceError: validateRegistration is not defined\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:17:43"}
{"level":"error","message":"Registration failed validateRegistration is not defined","service":"mock-test-api","stack":"ReferenceError: validateRegistration is not defined\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:18:41"}
{"level":"error","message":"Registration failed validateRegistration is not defined","service":"mock-test-api","stack":"ReferenceError: validateRegistration is not defined\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:18:42"}
{"level":"error","message":"Registration failed validateRegistration is not defined","service":"mock-test-api","stack":"ReferenceError: validateRegistration is not defined\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:19:30"}
{"level":"error","message":"Registration failed validateRegistration is not defined","service":"mock-test-api","stack":"ReferenceError: validateRegistration is not defined\n    at register (/home/ahmadi/Desktop/mock/src/controllers/authController.js:21:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at auth (/home/ahmadi/Desktop/mock/src/middleware/auth.js:84:7)","timestamp":"2025-08-07 07:19:31"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route /api/v1/admin/users/bulk not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/users/bulk not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-09 01:01:29","url":"/api/v1/admin/users/bulk","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route /api/v1/admin/users/bulk not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/users/bulk not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-09 01:01:31","url":"/api/v1/admin/users/bulk","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route /api/v1/admin/users/bulk not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/users/bulk not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-09 01:01:35","url":"/api/v1/admin/users/bulk","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route /api/v1/admin/users/bulk not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/admin/users/bulk not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-09 01:01:36","url":"/api/v1/admin/users/bulk","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"88f8a1fb-a873-4ff0-b5ff-dad63f4b9b3e\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"SYSTEM_ALERT\",\n                    ~~~~~~~~~~~~~~\n              title: \"🧪 Test Notification\",\n              message: \"This is a test notification to verify the system is working.\",\n              data: {},\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"88f8a1fb-a873-4ff0-b5ff-dad63f4b9b3e\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"SYSTEM_ALERT\",\n                    ~~~~~~~~~~~~~~\n              title: \"🧪 Test Notification\",\n              message: \"This is a test notification to verify the system is working.\",\n              data: {},\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async NotificationSystemTester.testBasicNotification (/home/ahmadi/Desktop/mock/test_notification_system.js:107:20)\n    at async NotificationSystemTester.runTests (/home/ahmadi/Desktop/mock/test_notification_system.js:37:7)\n    at async main (/home/ahmadi/Desktop/mock/test_notification_system.js:331:5)","timestamp":"2025-08-09 05:21:42"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617c843c48fsm3810606a12.10 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617c843c48fsm3810606a12.10 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617c843c48fsm3810606a12.10 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:23:58"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617c843c48fsm3810606a12.10 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617c843c48fsm3810606a12.10 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617c843c48fsm3810606a12.10 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:23:58"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f2c265sm14640684a12.26 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f2c265sm14640684a12.26 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f2c265sm14640684a12.26 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:00"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f2c265sm14640684a12.26 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f2c265sm14640684a12.26 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f2c265sm14640684a12.26 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:00"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send account status email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm1630820366b.25 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm1630820366b.25 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm1630820366b.25 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:01"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm1630820366b.25 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm1630820366b.25 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm1630820366b.25 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:01"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a91141e9sm14646682a12.58 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a91141e9sm14646682a12.58 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a91141e9sm14646682a12.58 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:03"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a91141e9sm14646682a12.58 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a91141e9sm14646682a12.58 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a91141e9sm14646682a12.58 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:03"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a07643asm1639451366b.15 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a07643asm1639451366b.15 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a07643asm1639451366b.15 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a07643asm1639451366b.15 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a07643asm1639451366b.15 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a07643asm1639451366b.15 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1645433166b.47 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1645433166b.47 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1645433166b.47 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1645433166b.47 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1645433166b.47 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1645433166b.47 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm1638376966b.12 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm1638376966b.12 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm1638376966b.12 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm1638376966b.12 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm1638376966b.12 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm1638376966b.12 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14659755a12.38 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14659755a12.38 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14659755a12.38 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14659755a12.38 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14659755a12.38 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14659755a12.38 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617f79f4a19sm1369389a12.6 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617f79f4a19sm1369389a12.6 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617f79f4a19sm1369389a12.6 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617f79f4a19sm1369389a12.6 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617f79f4a19sm1369389a12.6 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-617f79f4a19sm1369389a12.6 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1627417266b.90 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1627417266b.90 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1627417266b.90 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1627417266b.90 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1627417266b.90 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1627417266b.90 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a078bcbsm1643046766b.13 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a078bcbsm1643046766b.13 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a078bcbsm1643046766b.13 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a078bcbsm1643046766b.13 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a078bcbsm1643046766b.13 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a078bcbsm1643046766b.13 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ef2sm1635698866b.96 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ef2sm1635698866b.96 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ef2sm1635698866b.96 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ef2sm1635698866b.96 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ef2sm1635698866b.96 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ef2sm1635698866b.96 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0771f9sm1649849266b.16 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0771f9sm1649849266b.16 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0771f9sm1649849266b.16 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0771f9sm1649849266b.16 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0771f9sm1649849266b.16 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0771f9sm1649849266b.16 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14455324a12.43 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14455324a12.43 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14455324a12.43 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14455324a12.43 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14455324a12.43 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14455324a12.43 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 05:24:04"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af986a477c4sm790426066b.56 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af986a477c4sm790426066b.56 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af986a477c4sm790426066b.56 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:08"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af986a477c4sm790426066b.56 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af986a477c4sm790426066b.56 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af986a477c4sm790426066b.56 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:08"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14703685a12.38 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14703685a12.38 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14703685a12.38 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:09"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14703685a12.38 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14703685a12.38 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8feaf2fsm14703685a12.38 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:09"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send account status email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1632384566b.90 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1632384566b.90 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1632384566b.90 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:11"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1632384566b.90 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1632384566b.90 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e820asm1632384566b.90 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:11"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ecfsm1633926966b.94 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ecfsm1633926966b.94 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ecfsm1633926966b.94 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:12"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ecfsm1633926966b.94 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ecfsm1633926966b.94 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a219ecfsm1633926966b.94 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:12"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3361sm1637926666b.39 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3361sm1637926666b.39 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3361sm1637926666b.39 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3361sm1637926666b.39 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3361sm1637926666b.39 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3361sm1637926666b.39 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1650393466b.47 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1650393466b.47 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1650393466b.47 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1650393466b.47 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1650393466b.47 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a3e80sm1650393466b.47 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ffa3adsm14771253a12.50 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ffa3adsm14771253a12.50 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ffa3adsm14771253a12.50 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ffa3adsm14771253a12.50 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ffa3adsm14771253a12.50 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ffa3adsm14771253a12.50 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14499408a12.43 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14499408a12.43 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14499408a12.43 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14499408a12.43 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14499408a12.43 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8ff9ae5sm14499408a12.43 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm1636387666b.126 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm1636387666b.126 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm1636387666b.126 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm1636387666b.126 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm1636387666b.126 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm1636387666b.126 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8fe82a7sm14783373a12.30 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8fe82a7sm14783373a12.30 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8fe82a7sm14783373a12.30 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8fe82a7sm14783373a12.30 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8fe82a7sm14783373a12.30 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8fe82a7sm14783373a12.30 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0763e4sm1644008066b.1 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0763e4sm1644008066b.1 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0763e4sm1644008066b.1 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0763e4sm1644008066b.1 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0763e4sm1644008066b.1 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0763e4sm1644008066b.1 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af9965a8d17sm642892566b.63 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af9965a8d17sm642892566b.63 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af9965a8d17sm642892566b.63 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af9965a8d17sm642892566b.63 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af9965a8d17sm642892566b.63 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af9965a8d17sm642892566b.63 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df10asm1635547266b.59 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df10asm1635547266b.59 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df10asm1635547266b.59 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df10asm1635547266b.59 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df10asm1635547266b.59 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0df10asm1635547266b.59 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a38aasm1642662966b.37 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a38aasm1642662966b.37 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a38aasm1642662966b.37 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a38aasm1642662966b.37 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a38aasm1642662966b.37 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0a38aasm1642662966b.37 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 06:07:14"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-09 07:03:33"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:04:34"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:04:35"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:04:38"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:04:42"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:11"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:12"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:14"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:18"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:44"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:45"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:48"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:05:52"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:06:14"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:06:16"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:06:18"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:06:22"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:07:22"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:07:23"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:07:26"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:07:30"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c081sm1628232366b.97 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c081sm1628232366b.97 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c081sm1628232366b.97 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 07:08:01"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c081sm1628232366b.97 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c081sm1628232366b.97 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c081sm1628232366b.97 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 07:08:01"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/users/cme45ibg2000ci2blpwwhmxvt/status not found","method":"PUT","service":"mock-test-api","stack":"Error: Route /api/v1/admin/users/cme45ibg2000ci2blpwwhmxvt/status not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:159:5","timestamp":"2025-08-09 07:08:01","url":"/api/v1/admin/users/cme45ibg2000ci2blpwwhmxvt/status","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:08:30"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:08:32"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:08:34"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:08:38"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:09:39"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:09:40"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:09:44"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:09:49"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:10:40"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:10:42"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:10:45"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:10:49"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:11:50"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:11:51"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:11:53"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:11:57"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:05"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:06"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:07"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:09"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:13"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:17"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:18"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:20"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:24"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:28"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:29"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:31"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:35"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:42"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:43"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:46"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:12:51"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:13:51"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:13:52"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:13:54"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:13:58"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:14:23"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:14:24"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:14:26"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:14:30"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:24"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:26"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:28"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:32"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:40"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:41"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:43"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:47"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:57"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:17:58"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:00"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:06"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:07"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:08"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:11"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:15"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:19"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:20"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:22"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:27"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:39"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:40"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:42"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:18:47"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:19:47"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:19:49"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:19:52"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:19:56"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:20:04"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:20:06"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8eff60esm15080190a12.13 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8eff60esm15080190a12.13 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8eff60esm15080190a12.13 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 07:20:28"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8eff60esm15080190a12.13 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8eff60esm15080190a12.13 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8eff60esm15080190a12.13 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 07:20:28"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f17829sm14686390a12.19 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f17829sm14686390a12.19 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f17829sm14686390a12.19 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 07:21:14"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f17829sm14686390a12.19 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f17829sm14686390a12.19 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615a8f17829sm14686390a12.19 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-09 07:21:14"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:21:25"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:22:24"}
{"level":"error","message":"Get exam analytics failed examService.getExamAnalytics is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAnalytics is not a function\n    at getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:43)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-09 07:23:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884 }),\n  885 \n  886 // Average score\n→ 887 prisma.examAttempt.aggregate({\n        select: {\n          _avg: {\n            select: {\n              percentage: true,\n              score: true,\n              ~~~~~\n      ?       totalMarks?: true,\n      ?       obtainedMarks?: true,\n      ?       timeSpent?: true\n            }\n          }\n        },\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884 }),\n  885 \n  886 // Average score\n→ 887 prisma.examAttempt.aggregate({\n        select: {\n          _avg: {\n            select: {\n              percentage: true,\n              score: true,\n              ~~~~~\n      ?       totalMarks?: true,\n      ?       obtainedMarks?: true,\n      ?       timeSpent?: true\n            }\n          }\n        },\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:870:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:25)","timestamp":"2025-08-09 07:24:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884 }),\n  885 \n  886 // Average score\n→ 887 prisma.examAttempt.aggregate({\n        select: {\n          _avg: {\n            select: {\n              percentage: true,\n              score: true,\n              ~~~~~\n      ?       totalMarks?: true,\n      ?       obtainedMarks?: true,\n      ?       timeSpent?: true\n            }\n          }\n        },\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884 }),\n  885 \n  886 // Average score\n→ 887 prisma.examAttempt.aggregate({\n        select: {\n          _avg: {\n            select: {\n              percentage: true,\n              score: true,\n              ~~~~~\n      ?       totalMarks?: true,\n      ?       obtainedMarks?: true,\n      ?       timeSpent?: true\n            }\n          }\n        },\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:870:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:25)","timestamp":"2025-08-09 07:25:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get exam analytics failed \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884 }),\n  885 \n  886 // Average score\n→ 887 prisma.examAttempt.aggregate({\n        select: {\n          _avg: {\n            select: {\n              percentage: true,\n              score: true,\n              ~~~~~\n      ?       totalMarks?: true,\n      ?       obtainedMarks?: true,\n      ?       timeSpent?: true\n            }\n          }\n        },\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.aggregate()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884 }),\n  885 \n  886 // Average score\n→ 887 prisma.examAttempt.aggregate({\n        select: {\n          _avg: {\n            select: {\n              percentage: true,\n              score: true,\n              ~~~~~\n      ?       totalMarks?: true,\n      ?       obtainedMarks?: true,\n      ?       timeSpent?: true\n            }\n          }\n        },\n        where: {\n          status: \"COMPLETED\"\n        }\n      })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 3)\n    at async ExamService.getExamAnalytics (/home/ahmadi/Desktop/mock/src/services/examService.js:870:11)\n    at async getExamAnalytics (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:941:25)","timestamp":"2025-08-09 07:26:24"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:09:37","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:09:37","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:09:58","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:09:58","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:10:10","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:10:10","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:10:25","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:10:25","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-09-01T03%3A59%3A59.999Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:12:18","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:12:18","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000 not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000 not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-09 08:12:19","url":"/api/bookings/admin/calendar?startDate=2025-08-01T04%3A00%3A00.000Z&endDate=2025-08-31T04%3A00%3A00.000Z&limit=1000","userId":"anonymous"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:247:5)","timestamp":"2025-08-10 02:06:10"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:247:5)","timestamp":"2025-08-10 02:06:15"}
{"clientVersion":"6.13.0","code":"P2002","level":"error","message":"Create exam category failed \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)","meta":{"modelName":"ExamCategory","target":["name"]},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async createExamCategory (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:24)","timestamp":"2025-08-10 02:11:42"}
{"clientVersion":"6.13.0","code":"P2002","level":"error","message":"Create exam category failed \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)","meta":{"modelName":"ExamCategory","target":["name"]},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async createExamCategory (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:24)","timestamp":"2025-08-10 02:11:44"}
{"clientVersion":"6.13.0","code":"P2002","level":"error","message":"Create exam category failed \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)","meta":{"modelName":"ExamCategory","target":["name"]},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async createExamCategory (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:24)","timestamp":"2025-08-10 02:11:59"}
{"clientVersion":"6.13.0","code":"P2002","level":"error","message":"Create exam category failed \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)","meta":{"modelName":"ExamCategory","target":["name"]},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.examCategory.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:50\n\n  294 try {\n  295   const { name, description, icon, color, sortOrder } = req.body;\n  296 \n→ 297   const category = await prisma.examCategory.create(\nUnique constraint failed on the fields: (`name`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async createExamCategory (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:297:24)","timestamp":"2025-08-10 02:12:01"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e833dsm1779215866b.64 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e833dsm1779215866b.64 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e833dsm1779215866b.64 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-10 02:13:53"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e833dsm1779215866b.64 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e833dsm1779215866b.64 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a1e833dsm1779215866b.64 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-10 02:13:53"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0757b7sm1788716166b.19 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0757b7sm1788716166b.19 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0757b7sm1788716166b.19 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-10 02:24:24"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0757b7sm1788716166b.19 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0757b7sm1788716166b.19 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0757b7sm1788716166b.19 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-10 02:24:24"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test\",\n         description: \"FA1 Test\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test\",\n         description: \"FA1 Test\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:28:00"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test\",\n         description: \"FA1 Test\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test\",\n         description: \"FA1 Test\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:28:01"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:29:35"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:29:36"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:30:00"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:30:02"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:33:26"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:33:28"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:34:15"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"FA1 Test1\",\n         description: \"FA1 Test1\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 100.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:34:17"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-10 03:41:31","url":"/","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/auth/login not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/auth/login not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-10 03:41:31","url":"/api/v1/auth/login","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/ not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/ not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-10 03:41:31","url":"/api/v1/","userId":"anonymous"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"aaaaaaaaaaaaaa\",\n         description: \"aaaaaaaaaaaa\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 2.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"aaaaaaaaaaaaaa\",\n         description: \"aaaaaaaaaaaa\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 2.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:50:20"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"aaaaaaaaaaaaaa\",\n         description: \"aaaaaaaaaaaa\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 2.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"aaaaaaaaaaaaaa\",\n         description: \"aaaaaaaaaaaa\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 2.01,\n         isPublic: true,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 03:50:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:803:46\n\n  800  */\n  801 async getUserExamStats(userId) {\n  802   try {\n→ 803     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9vs0000i2jijo7g0t4t\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:803:46\n\n  800  */\n  801 async getUserExamStats(userId) {\n  802   try {\n→ 803     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9vs0000i2jijo7g0t4t\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:803:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-10 04:46:48"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route /admin not found","method":"GET","service":"mock-test-api","stack":"Error: Route /admin not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-10 06:01:21","url":"/admin","userId":"anonymous"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-10 06:01:29","url":"/","userId":"anonymous"}
{"ip":"192.168.0.27","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-10 06:01:50","url":"/","userId":"anonymous"}
{"ip":"192.168.0.68","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-10 06:02:41","url":"/","userId":"anonymous"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:23:24"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:23:28"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:23:35"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:23:36"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:26:49"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"ssssss\",\n         description: \"sssssss sd\",\n         examCategoryId: \"cmdzxzku80081i2znz1ta5m0x\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 11,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:26:50"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:37:12"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:37:13"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:37:23"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:37:25"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:39:59"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         startDate: null,\n         ~~~~~~~~~\n         endDate: null,\n         maxAttempts: 1,\n         retakeDelay: 0,\n         questionCount: undefined,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   scheduledStart?: DateTime | Null,\n     ?   scheduledEnd?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   totalQuestions?: Int | Null,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:40:00"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:41:01"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"sdaaaaaaaa\",\n         description: \"sadaasdasdasdasdas\",\n         examCategoryId: \"cat_004\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 50,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxAttempts: 1,\n         ~~~~~~~~~~~\n         retakeDelay: 0,\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   maxRetakes?: Int,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `maxAttempts`. Did you mean `attempts`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:41:02"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"asdfsdf\",\n         description: \"asdfasdfadsf asdfasd\",\n         examCategoryId: \"cmdzxyxao007yi2zn02mft3ru\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxRetakes: 1,\n         retakeDelay: 0,\n         ~~~~~~~~~~~\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `retakeDelay`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"asdfsdf\",\n         description: \"asdfasdfadsf asdfasd\",\n         examCategoryId: \"cmdzxyxao007yi2zn02mft3ru\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxRetakes: 1,\n         retakeDelay: 0,\n         ~~~~~~~~~~~\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `retakeDelay`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:44:10"}
{"clientVersion":"6.13.0","level":"error","message":"Create exam failed \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"asdfsdf\",\n         description: \"asdfasdfadsf asdfasd\",\n         examCategoryId: \"cmdzxyxao007yi2zn02mft3ru\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxRetakes: 1,\n         retakeDelay: 0,\n         ~~~~~~~~~~~\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `retakeDelay`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:44:38\n\n  41 }\n  42 \n  43 // Create exam\n→ 44 const exam = await prisma.exam.create({\n       data: {\n         title: \"asdfsdf\",\n         description: \"asdfasdfadsf asdfasd\",\n         examCategoryId: \"cmdzxyxao007yi2zn02mft3ru\",\n         duration: 60,\n         totalMarks: 100,\n         passingMarks: 70,\n         price: 0.02,\n         isPublic: false,\n         isActive: true,\n         instructions: undefined,\n         rules: undefined,\n         scheduledStart: null,\n         scheduledEnd: null,\n         maxRetakes: 1,\n         retakeDelay: 0,\n         ~~~~~~~~~~~\n         totalQuestions: 10,\n         difficultyDistribution: undefined,\n         createdBy: \"cmdw3a9vx0001i2jis7rwwyai\",\n     ?   id?: String,\n     ?   currency?: String,\n     ?   allowRetakes?: Boolean,\n     ?   showResults?: Boolean,\n     ?   showAnswers?: Boolean,\n     ?   randomizeQuestions?: Boolean,\n     ?   randomizeOptions?: Boolean,\n     ?   questionOverlapPercentage?: Float,\n     ?   approvedBy?: String | Null,\n     ?   approvedAt?: DateTime | Null,\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime,\n     ?   essayQuestionsCount?: Int | Null,\n     ?   multipleChoiceQuestionsCount?: Int | Null,\n     ?   shortAnswerQuestionsCount?: Int | Null,\n     ?   fillInTheBlankQuestionsCount?: Int | Null,\n     ?   trueFalseQuestionsCount?: Int | Null,\n     ?   matchingQuestionsCount?: Int | Null,\n     ?   orderingQuestionsCount?: Int | Null,\n     ?   certificates?: CertificateUncheckedCreateNestedManyWithoutExamInput,\n     ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutExamInput,\n     ?   bookings?: ExamBookingUncheckedCreateNestedManyWithoutExamInput,\n     ?   questions?: ExamQuestionUncheckedCreateNestedManyWithoutExamInput,\n     ?   examScores?: ExamScoreUncheckedCreateNestedManyWithoutExamInput\n       },\n       include: {\n         examCategory: {\n           select: {\n             name: true,\n             color: true\n           }\n         }\n       }\n     })\n\nUnknown argument `retakeDelay`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:44:20)\n    at async createExam (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:780:22)","timestamp":"2025-08-10 06:44:12"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:247:5)","timestamp":"2025-08-10 08:13:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 01:07:41"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 01:07:43"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 01:07:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 02:24:35"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 02:24:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 02:31:48"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 02:32:56"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 02:32:57"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 02:32:59"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 02:33:03"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 02:35:30"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:32:39"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 05:32:39"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:32:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 05:32:41"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:34:56"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:34:57"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:34:59"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:35:03"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:35:07"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 05:35:07"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:35:08"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:35:10"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 05:37:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 05:40:48"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:45:13"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 05:45:13"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:45:14"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 05:45:16"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:25:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:25:02"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:979:46\n\n  976  */\n  977 async getUserExamStats(userId) {\n  978   try {\n→ 979     const stats = await prisma.examAttempt.groupBy({\n            select: {\n              _count: {\n                select: {\n                  id: true\n                }\n              },\n              _avg: {\n                select: {\n                  percentage: true,\n                  score: true,\n                  ~~~~~\n          ?       totalMarks?: true,\n          ?       obtainedMarks?: true,\n          ?       timeSpent?: true\n                }\n              },\n              status: true\n            },\n            by: [\n              \"status\"\n            ],\n            where: {\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n            }\n          })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:979:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 06:25:03"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:25:04"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:25:05"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:25:07"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:25:11"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:26:04"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:26:11"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:26:12"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:26:14"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:26:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:27:04"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:27:18"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:27:19"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:27:21"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:27:25"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:28:04"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:28:26"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:28:27"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:28:29"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:28:33"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:875:28\n\n  872 if (status) where.status = status;\n  873 \n  874 const [attempts, total] = await Promise.all([\n→ 875   prisma.examAttempt.findMany({\n          where: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            status: \"passed\"\n                    ~~~~~~~~\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            certificate: true\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 100\n        })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:29:04"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:29:33"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:29:34"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:29:36"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:29:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:30:04"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:30:40"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:30:41"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:30:43"}
{"level":"error","message":"Get user certificates failed examService.getUserCertificates is not a function","service":"mock-test-api","stack":"TypeError: examService.getUserCertificates is not a function\n    at getUserCertificates (/home/ahmadi/Desktop/mock/src/controllers/examController.js:537:46)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)","timestamp":"2025-08-11 06:30:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam history failed \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:887:28\n\n  884   skip,\n  885   take: limit\n  886 }),\n→ 887 prisma.examAttempt.count({\n        select: {\n          _count: {\n            select: {\n              _all: true\n            }\n          }\n        },\n        where: {\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          status: \"passed\"\n                  ~~~~~~~~\n        }\n      })\n\nInvalid value for argument `status`. Expected AttemptStatus.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 1)\n    at async ExamService.getUserExamHistory (/home/ahmadi/Desktop/mock/src/services/examService.js:874:33)\n    at async getUserExamHistory (/home/ahmadi/Desktop/mock/src/controllers/examController.js:390:23)","timestamp":"2025-08-11 06:31:04"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 06:33:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 06:47:16"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"\",\n          dateOfBirth: null,\n          gender: \"\",\n                  ~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"\",\n          dateOfBirth: null,\n          gender: \"\",\n                  ~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:47:50"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"\",\n          dateOfBirth: null,\n          gender: \"\",\n                  ~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"\",\n          dateOfBirth: null,\n          gender: \"\",\n                  ~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:47:51"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"0787777777\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"0787777777\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:48:20"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"0787777777\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"0787777777\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"afdsfsdfds\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:48:21"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:51:35"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:51:36"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"female\",\n                  ~~~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"female\",\n                  ~~~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:52:11"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"female\",\n                  ~~~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"09786678678\",\n          dateOfBirth: new Date(\"2025-08-12T00:00:00.000Z\"),\n          gender: \"female\",\n                  ~~~~~~~~\n          address: \"fasdfdasf dfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:52:13"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"543534534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"sadfsdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"543534534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"sadfsdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:56:35"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"543534534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"sadfsdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"543534534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"male\",\n                  ~~~~~~\n          address: \"sadfsdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:56:36"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: null,\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: null,\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:58:37"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: null,\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: null,\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:58:38"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:58:57"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435435\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsafadsfsd\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 06:58:58"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435345345\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"\",\n                  ~~\n          address: \"fadfadsfas\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435345345\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"\",\n                  ~~\n          address: \"fadfadsfas\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 07:00:46"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435345345\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"\",\n                  ~~\n          address: \"fadfadsfas\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"435345345\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"\",\n                  ~~\n          address: \"fadfadsfas\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 07:00:47"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"43534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"M\",\n                  ~~~\n          address: \"sadfasdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"43534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"M\",\n                  ~~~\n          address: \"sadfasdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 07:01:24"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"43534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"M\",\n                  ~~~\n          address: \"sadfasdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"43534534\",\n          dateOfBirth: new Date(\"2025-08-05T00:00:00.000Z\"),\n          gender: \"M\",\n                  ~~~\n          address: \"sadfasdfsdf\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-11 07:01:25"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 07:04:12"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-11 07:04:56"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-11 07:04:56"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 07:11:29"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-11 07:15:35"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-11 07:15:35"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 07:15:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 07:16:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 07:51:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 07:56:36"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 08:16:16"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 08:16:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1184:46\n\n  1181  */\n  1182 async getUserExamStats(userId) {\n  1183   try {\n→ 1184     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1184:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-11 08:56:16"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-11 09:13:35"}
{"ip":"192.168.1.27","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-12 00:05:27","url":"/","userId":"anonymous"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1227:46\n\n  1224  */\n  1225 async getUserExamStats(userId) {\n  1226   try {\n→ 1227     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.groupBy()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1227:46\n\n  1224  */\n  1225 async getUserExamStats(userId) {\n  1226   try {\n→ 1227     const stats = await prisma.examAttempt.groupBy({\n             select: {\n               _count: {\n                 select: {\n                   id: true\n                 }\n               },\n               _avg: {\n                 select: {\n                   percentage: true,\n                   score: true,\n                   ~~~~~\n           ?       totalMarks?: true,\n           ?       obtainedMarks?: true,\n           ?       timeSpent?: true\n                 }\n               },\n               status: true\n             },\n             by: [\n               \"status\"\n             ],\n             where: {\n               userId: \"cmdw3a9w30003i2jiq5yeaei0\"\n             }\n           })\n\nUnknown field `score` for select statement on model `ExamAttemptAvgAggregateOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1227:21)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-12 00:06:08"}
{"level":"error","message":"Can user book exam check failed now is not defined","service":"mock-test-api","stack":"ReferenceError: now is not defined\n    at ExamBookingService.canUserBookExam (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:49:32)\n    at async createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:586:23)","timestamp":"2025-08-12 00:44:21"}
{"level":"error","message":"Can user book exam check failed now is not defined","service":"mock-test-api","stack":"ReferenceError: now is not defined\n    at ExamBookingService.canUserBookExam (/home/ahmadi/Desktop/mock/src/services/examBookingService.js:49:32)\n    at async createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:586:23)","timestamp":"2025-08-12 00:44:22"}
{"level":"error","message":"Admin create booking failed examBookingService.canUserBookExam is not a function","service":"mock-test-api","stack":"TypeError: examBookingService.canUserBookExam is not a function\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:586:48)","timestamp":"2025-08-12 00:47:20"}
{"level":"error","message":"Admin create booking failed examBookingService.canUserBookExam is not a function","service":"mock-test-api","stack":"TypeError: examBookingService.canUserBookExam is not a function\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:586:48)","timestamp":"2025-08-12 00:47:22"}
{"level":"error","message":"Admin create booking failed examBookingService.canUserBookExam is not a function","service":"mock-test-api","stack":"TypeError: examBookingService.canUserBookExam is not a function\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:586:48)","timestamp":"2025-08-12 00:48:27"}
{"level":"error","message":"Admin create booking failed examBookingService.canUserBookExam is not a function","service":"mock-test-api","stack":"TypeError: examBookingService.canUserBookExam is not a function\n    at createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:586:48)","timestamp":"2025-08-12 00:48:28"}
{"attemptId":"cme83h3tg0011i2e4xnnup30z","error":"Cannot read properties of undefined (reading 'title')","level":"error","message":"Failed to send exam completion notification","service":"mock-test-api","timestamp":"2025-08-12 01:22:58","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-12 01:23:01"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-12 01:23:01"}
{"level":"error","message":"Error getting bill: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 01:59:50"}
{"level":"error","message":"Download bill error: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 01:59:50"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-12 01:59:55"}
{"level":"error","message":"Error getting bill: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 02:01:39"}
{"level":"error","message":"Download bill error: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 02:01:39"}
{"level":"error","message":"Error getting bill: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 02:03:55"}
{"level":"error","message":"Download bill error: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 02:03:55"}
{"level":"error","message":"Error getting bill: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 02:04:25"}
{"level":"error","message":"Download bill error: Booking not found or access denied","service":"mock-test-api","stack":"Error: Booking not found or access denied\n    at BillingService.getBillByBookingId (/home/ahmadi/Desktop/mock/src/services/billingService.js:114:15)\n    at async downloadBill (/home/ahmadi/Desktop/mock/src/controllers/billingController.js:99:20)","timestamp":"2025-08-12 02:04:25"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-12 04:29:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1247:53\n\n  1244   where: { userId, isPassed: true }\n  1245 });\n  1246 \n→ 1247 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1247:53\n\n  1244   where: { userId, isPassed: true }\n  1245 });\n  1246 \n→ 1247 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1247:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-12 06:06:03"}
{"ip":"192.168.1.27","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:117:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-12 06:32:49","url":"/","userId":"anonymous"}
{"code":"EIO","errno":-5,"level":"error","message":"Uncaught Exception: write EIO","service":"mock-test-api","stack":"Error: write EIO\n    at afterWriteDispatched (node:internal/stream_base_commons:161:15)\n    at writeGeneric (node:internal/stream_base_commons:152:3)\n    at Socket._writeGeneric (node:net:958:11)\n    at Socket._write (node:net:970:8)\n    at writeOrBuffer (node:internal/streams/writable:572:12)\n    at _write (node:internal/streams/writable:501:10)\n    at Writable.write (node:internal/streams/writable:510:10)\n    at Console.log (/home/ahmadi/Desktop/mock/node_modules/winston/lib/winston/transports/console.js:87:23)\n    at Console._write (/home/ahmadi/Desktop/mock/node_modules/winston-transport/modern.js:103:17)\n    at doWrite (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:390:139)","syscall":"write","timestamp":"2025-08-12 10:30:00"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:247:5)","timestamp":"2025-08-13 02:01:17"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:247:5)","timestamp":"2025-08-13 02:03:33"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766d1sm2343287466b.18 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766d1sm2343287466b.18 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766d1sm2343287466b.18 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 02:14:05"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766d1sm2343287466b.18 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766d1sm2343287466b.18 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766d1sm2343287466b.18 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 02:14:05"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-618461ab3dcsm3250677a12.56 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-618461ab3dcsm3250677a12.56 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-618461ab3dcsm3250677a12.56 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 02:29:37"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-618461ab3dcsm3250677a12.56 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-618461ab3dcsm3250677a12.56 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-618461ab3dcsm3250677a12.56 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 02:29:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1288:53\n\n  1285   where: { userId, isPassed: true }\n  1286 });\n  1287 \n→ 1288 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1288:53\n\n  1285   where: { userId, isPassed: true }\n  1286 });\n  1287 \n→ 1288 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1288:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:487:21)","timestamp":"2025-08-13 02:37:18"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-13 02:39:20"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-13 02:39:21"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-13 02:59:18"}
{"clientVersion":"6.13.0","level":"error","message":"Profile update failed \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:38\n\n  590   profilePicture \n  591 } = req.body;\n  592 \n→ 593 const user = await prisma.user.update({\n        where: {\n          id: \"cmdw3a9w30003i2jiq5yeaei0\"\n        },\n        data: {\n          firstName: \"Student\",\n          lastName: \"User\",\n          phone: \"078888888\",\n          dateOfBirth: new Date(\"2025-08-11T00:00:00.000Z\"),\n          gender: \"Male\",\n                  ~~~~~~\n          address: \"dsfsdfa\",\n          profilePicture: undefined\n        },\n        select: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          phone: true,\n          dateOfBirth: true,\n          gender: true,\n          profileImage: true,\n          profilePicture: true,\n          address: true,\n          departmentId: true,\n          role: true,\n          status: true,\n          isActive: true,\n          isEmailVerified: true,\n          isPhoneVerified: true,\n          lastLoginAt: true,\n          createdAt: true,\n          updatedAt: true\n        }\n      })\n\nInvalid value for argument `gender`. Expected Gender.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async updateProfile (/home/ahmadi/Desktop/mock/src/controllers/authController.js:593:20)","timestamp":"2025-08-13 02:59:19"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6184b807728sm2806088a12.12 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6184b807728sm2806088a12.12 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6184b807728sm2806088a12.12 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:04:07"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6184b807728sm2806088a12.12 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6184b807728sm2806088a12.12 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6184b807728sm2806088a12.12 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:04:07"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm2342133166b.126 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm2342133166b.126 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm2342133166b.126 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:10:39"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm2342133166b.126 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm2342133166b.126 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a24062esm2342133166b.126 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:10:39"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615cc38aee5sm19713858a12.3 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615cc38aee5sm19713858a12.3 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615cc38aee5sm19713858a12.3 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:32:24"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615cc38aee5sm19713858a12.3 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615cc38aee5sm19713858a12.3 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-615cc38aee5sm19713858a12.3 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:32:24"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076620sm2338735966b.10 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076620sm2338735966b.10 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076620sm2338735966b.10 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:33:55"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076620sm2338735966b.10 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076620sm2338735966b.10 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076620sm2338735966b.10 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:33:55"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6186bfee29csm837906a12.15 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6186bfee29csm837906a12.15 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6186bfee29csm837906a12.15 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:41:48"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6186bfee29csm837906a12.15 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6186bfee29csm837906a12.15 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials 4fb4d7f45d1cf-6186bfee29csm837906a12.15 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:41:48"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af93ddf5b48sm2075925166b.49 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af93ddf5b48sm2075925166b.49 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af93ddf5b48sm2075925166b.49 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:42:58"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af93ddf5b48sm2075925166b.49 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af93ddf5b48sm2075925166b.49 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af93ddf5b48sm2075925166b.49 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 03:42:58"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c039sm2365066366b.110 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c039sm2365066366b.110 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c039sm2365066366b.110 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 04:33:47"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Registration failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c039sm2365066366b.110 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c039sm2365066366b.110 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a21c039sm2365066366b.110 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 04:33:47"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send verification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm2365838466b.12 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm2365838466b.12 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a076409sm2365838466b.12 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 04:37:06"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Send notification email failed Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm2361876866b.25 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm2361876866b.25 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm2361876866b.25 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 04:37:08"}
{"code":"EAUTH","command":"AUTH PLAIN","level":"error","message":"Failed to send typed email Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm2361876866b.25 - gsmtp","response":"535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm2361876866b.25 - gsmtp","responseCode":535,"service":"mock-test-api","stack":"Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to\n535 5.7.8  https://support.google.com/mail/?p=BadCredentials a640c23a62f3a-af91a0766b8sm2361876866b.25 - gsmtp\n    at SMTPConnection._formatError (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:809:19)\n    at SMTPConnection._actionAUTHComplete (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:1588:34)\n    at SMTPConnection.<anonymous> (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:556:26)\n    at SMTPConnection._processResponse (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:993:20)\n    at SMTPConnection._onData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:774:14)\n    at SMTPConnection._onSocketData (/home/ahmadi/Desktop/mock/node_modules/nodemailer/lib/smtp-connection/index.js:195:44)\n    at TLSSocket.emit (node:events:524:28)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)","timestamp":"2025-08-13 04:37:08"}
{"attemptId":"cme9qyt980001i277pjkfg4x1","error":"Cannot read properties of undefined (reading 'title')","level":"error","message":"Failed to send exam completion notification","service":"mock-test-api","timestamp":"2025-08-13 05:08:03","userId":"cmdw3a9w30003i2jiq5yeaei0"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-13 05:08:06"}
{"level":"error","message":"Get exam attempt failed examService.getExamAttempt is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamAttempt is not a function\n    at getExamAttempt (/home/ahmadi/Desktop/mock/src/controllers/examController.js:420:41)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-13 05:08:06"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1347:53\n\n  1344   where: { userId, isPassed: true }\n  1345 });\n  1346 \n→ 1347 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1347:53\n\n  1344   where: { userId, isPassed: true }\n  1345 });\n  1346 \n→ 1347 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1347:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:501:21)","timestamp":"2025-08-13 05:19:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1347:53\n\n  1344   where: { userId, isPassed: true }\n  1345 });\n  1346 \n→ 1347 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1347:53\n\n  1344   where: { userId, isPassed: true }\n  1345 });\n  1346 \n→ 1347 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1347:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:501:21)","timestamp":"2025-08-13 05:20:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1331:53\n\n  1328   where: { userId, isPassed: true }\n  1329 });\n  1330 \n→ 1331 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1331:53\n\n  1328   where: { userId, isPassed: true }\n  1329 });\n  1330 \n→ 1331 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1331:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:501:21)","timestamp":"2025-08-13 05:35:18"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1331:53\n\n  1328   where: { userId, isPassed: true }\n  1329 });\n  1330 \n→ 1331 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1331:53\n\n  1328   where: { userId, isPassed: true }\n  1329 });\n  1330 \n→ 1331 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1331:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:501:21)","timestamp":"2025-08-13 05:37:47"}
{"clientVersion":"6.13.0","level":"error","message":"Get user exam stats failed \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1331:53\n\n  1328   where: { userId, isPassed: true }\n  1329 });\n  1330 \n→ 1331 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.count()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1331:53\n\n  1328   where: { userId, isPassed: true }\n  1329 });\n  1330 \n→ 1331 const certificates = await prisma.certificate.count({\n         select: {\n           _count: {\n             select: {\n               _all: true\n             }\n           }\n         },\n         where: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           isActive: true,\n           ~~~~~~~~\n       ?   AND?: CertificateWhereInput | CertificateWhereInput[],\n       ?   OR?: CertificateWhereInput[],\n       ?   NOT?: CertificateWhereInput | CertificateWhereInput[],\n       ?   id?: StringFilter | String,\n       ?   examId?: StringFilter | String,\n       ?   attemptId?: StringFilter | String,\n       ?   certificateNumber?: StringFilter | String,\n       ?   issuedAt?: DateTimeFilter | DateTime,\n       ?   expiresAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   isRevoked?: BoolFilter | Boolean,\n       ?   revokedAt?: DateTimeNullableFilter | DateTime | Null,\n       ?   revokedBy?: StringNullableFilter | String | Null,\n       ?   revokedReason?: StringNullableFilter | String | Null,\n       ?   pdfUrl?: StringNullableFilter | String | Null,\n       ?   pdfPath?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   attempt?: ExamAttemptScalarRelationFilter | ExamAttemptWhereInput,\n       ?   exam?: ExamScalarRelationFilter | ExamWhereInput,\n       ?   revoker?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n       ?   user?: UserScalarRelationFilter | UserWhereInput\n         }\n       })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.getUserExamStats (/home/ahmadi/Desktop/mock/src/services/examService.js:1331:28)\n    at async getUserExamStats (/home/ahmadi/Desktop/mock/src/controllers/examController.js:501:21)","timestamp":"2025-08-13 05:41:54"}
{"level":"error","message":"Process payment on print failed notificationService.sendPaymentConfirmation is not a function","service":"mock-test-api","stack":"TypeError: notificationService.sendPaymentConfirmation is not a function\n    at processPaymentOnPrint (/home/ahmadi/Desktop/mock/src/controllers/paymentController.js:265:33)","timestamp":"2025-08-13 05:54:06"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tk5ls002wi26f2z4msl6d\",\n           certificateNumber: \"CERT-1755080420930-8gor892il\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:20.930Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:20.930Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tk5ls002wi26f2z4msl6d\",\n           certificateNumber: \"CERT-1755080420930-8gor892il\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:20.930Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:20.930Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:20:20"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tk5ls002wi26f2z4msl6d\",\n           certificateNumber: \"CERT-1755080421960-mcl4zr4af\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:21.960Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:21.960Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tk5ls002wi26f2z4msl6d\",\n           certificateNumber: \"CERT-1755080421960-mcl4zr4af\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:21.960Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:21.960Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:20:21"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tkkj00036i26fsyz0tuzd\",\n           certificateNumber: \"CERT-1755080437109-shnwd6trn\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:37.109Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:37.109Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tkkj00036i26fsyz0tuzd\",\n           certificateNumber: \"CERT-1755080437109-shnwd6trn\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:37.109Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:37.109Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:20:37"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tkkj00036i26fsyz0tuzd\",\n           certificateNumber: \"CERT-1755080438142-qjoxiodxl\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:38.142Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:38.142Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tkkj00036i26fsyz0tuzd\",\n           certificateNumber: \"CERT-1755080438142-qjoxiodxl\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:20:38.142Z\"),\n           expiresAt: new Date(\"2026-08-13T10:20:38.142Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:20:38"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tl2z1003gi26frcj57vi8\",\n           certificateNumber: \"CERT-1755080466580-ry1ru2cxa\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:06.580Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:06.580Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tl2z1003gi26frcj57vi8\",\n           certificateNumber: \"CERT-1755080466580-ry1ru2cxa\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:06.580Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:06.580Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:21:06"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tl2z1003gi26frcj57vi8\",\n           certificateNumber: \"CERT-1755080468118-ux005j95x\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:08.118Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:08.118Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tl2z1003gi26frcj57vi8\",\n           certificateNumber: \"CERT-1755080468118-ux005j95x\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:08.118Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:08.118Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:21:08"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tlohd003qi26fgcd929rt\",\n           certificateNumber: \"CERT-1755080492166-fl61al4ta\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:32.166Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:32.166Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tlohd003qi26fgcd929rt\",\n           certificateNumber: \"CERT-1755080492166-fl61al4ta\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:32.166Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:32.166Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:21:32"}
{"clientVersion":"6.13.0","level":"error","message":"Generate certificate failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tlohd003qi26fgcd929rt\",\n           certificateNumber: \"CERT-1755080493686-k37mxu17j\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:33.686Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:33.686Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:1186:52\n\n  1183 }\n  1184 \n  1185 // Create certificate\n→ 1186 const certificate = await prisma.certificate.create({\n         data: {\n           userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n           examId: \"cme9sl4tp000mi28xuxdgatdb\",\n           attemptId: \"cme9tlohd003qi26fgcd929rt\",\n           certificateNumber: \"CERT-1755080493686-k37mxu17j\",\n           status: \"EARNED\",\n           ~~~~~~\n           issuedAt: new Date(\"2025-08-13T10:21:33.686Z\"),\n           expiresAt: new Date(\"2026-08-13T10:21:33.686Z\"),\n       ?   id?: String,\n       ?   isRevoked?: Boolean,\n       ?   revokedAt?: DateTime | Null,\n       ?   revokedBy?: String | Null,\n       ?   revokedReason?: String | Null,\n       ?   pdfUrl?: String | Null,\n       ?   pdfPath?: String | Null,\n       ?   createdAt?: DateTime,\n       ?   updatedAt?: DateTime\n         },\n         include: {\n           exam: true,\n           user: {\n             select: {\n               id: true,\n               firstName: true,\n               lastName: true,\n               email: true\n             }\n           }\n         }\n       })\n\nUnknown argument `status`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.generateCertificate (/home/ahmadi/Desktop/mock/src/services/examService.js:1186:27)\n    at async generateCertificate (/home/ahmadi/Desktop/mock/src/controllers/examController.js:580:22)","timestamp":"2025-08-13 06:21:33"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 10:15:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 10:45:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 11:00:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 11:15:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 11:30:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 11:45:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 11:45:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-13 12:15:01"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-14 01:00:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:162:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:122:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-14 01:45:00"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-14 02:44:28"}
{"address":"0.0.0.0","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use 0.0.0.0:5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use 0.0.0.0:5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at doListen (node:net:2139:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)","syscall":"listen","timestamp":"2025-08-14 02:44:33"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"05fbee6b-8c31-42ae-8303-f60af9a6f073\",\n              userId: \"cmdyne4fk000si2x0zl74wvll\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"05fbee6b-8c31-42ae-8303-f60af9a6f073\",\n              userId: \"cmdyne4fk000si2x0zl74wvll\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 0)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"b302b1df-d352-4df4-9333-cd4eb7e38928\",\n              userId: \"cme9krpsn0008i2udt2oczge2\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"b302b1df-d352-4df4-9333-cd4eb7e38928\",\n              userId: \"cme9krpsn0008i2udt2oczge2\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 3)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"23d465c5-ba38-4314-b81a-697901777917\",\n              userId: \"cme9lbonu0009i2udsxd6hqs3\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"23d465c5-ba38-4314-b81a-697901777917\",\n              userId: \"cme9lbonu0009i2udsxd6hqs3\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 4)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"72c3ce29-3c7c-46b6-9c65-3b52a39ee07c\",\n              userId: \"cme5afwd90000i20ahd3dwb4n\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"72c3ce29-3c7c-46b6-9c65-3b52a39ee07c\",\n              userId: \"cme5afwd90000i20ahd3dwb4n\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 6)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"dafc191f-017b-4b16-9217-3d13f6012598\",\n              userId: \"cme9mk1yg0006i25r86e1jn18\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"dafc191f-017b-4b16-9217-3d13f6012598\",\n              userId: \"cme9mk1yg0006i25r86e1jn18\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 8)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"6e1226a2-5ff0-435b-952f-07c3675dcd62\",\n              userId: \"cme9msg2g0007i25r8cfv7l90\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"6e1226a2-5ff0-435b-952f-07c3675dcd62\",\n              userId: \"cme9msg2g0007i25r8cfv7l90\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 9)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"17494806-2ae7-4f0f-855d-97e60aab643c\",\n              userId: \"cme9prcx80000i2mz4cxn3kpq\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"17494806-2ae7-4f0f-855d-97e60aab643c\",\n              userId: \"cme9prcx80000i2mz4cxn3kpq\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 13)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"a96e18a3-c1f0-4a49-bd07-711980efe4ce\",\n              userId: \"cme45ybcd0004i2e48zjke01b\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"a96e18a3-c1f0-4a49-bd07-711980efe4ce\",\n              userId: \"cme45ybcd0004i2e48zjke01b\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 14)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"3a87bd0a-2778-423d-a749-bcd0c9ee6617\",\n              userId: \"cme9puj4e0000i26xcbhenqyl\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"3a87bd0a-2778-423d-a749-bcd0c9ee6617\",\n              userId: \"cme9puj4e0000i26xcbhenqyl\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 15)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"abda31ee-29a0-4c6e-aa8b-df14ef07159f\",\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"abda31ee-29a0-4c6e-aa8b-df14ef07159f\",\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 16)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"1e82a349-69a3-4d2b-99d1-91971db4cbda\",\n              userId: \"cme9pvmku0000i2tvtbg0pzyp\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"1e82a349-69a3-4d2b-99d1-91971db4cbda\",\n              userId: \"cme9pvmku0000i2tvtbg0pzyp\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 17)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"783c7a85-0d11-41b6-a011-6dc08a97471d\",\n              userId: \"cme45zb97000bi2e4g7811w5d\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"783c7a85-0d11-41b6-a011-6dc08a97471d\",\n              userId: \"cme45zb97000bi2e4g7811w5d\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 1)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"8423747a-d081-436c-b963-e72a5c77e93a\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"8423747a-d081-436c-b963-e72a5c77e93a\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 2)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"85ef3147-e8c1-4258-9f2d-31e13576990c\",\n              userId: \"cme9ny0dv0000i23quhhtxgyn\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"85ef3147-e8c1-4258-9f2d-31e13576990c\",\n              userId: \"cme9ny0dv0000i23quhhtxgyn\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 5)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"5739d4fd-de64-4ddf-803f-464aa210072a\",\n              userId: \"cme45ibg2000ci2blpwwhmxvt\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"5739d4fd-de64-4ddf-803f-464aa210072a\",\n              userId: \"cme45ibg2000ci2blpwwhmxvt\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 7)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"86d05363-1cd5-4bbf-a19e-6a84db0c71ae\",\n              userId: \"cme9nkf290000i2jx6zgia1oo\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"86d05363-1cd5-4bbf-a19e-6a84db0c71ae\",\n              userId: \"cme9nkf290000i2jx6zgia1oo\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 10)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"6781cf2e-815a-4dd4-b6ae-5e9d47031572\",\n              userId: \"cme9nmdiu0001i2jxa73jol8k\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"6781cf2e-815a-4dd4-b6ae-5e9d47031572\",\n              userId: \"cme9nmdiu0001i2jxa73jol8k\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 11)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e56df657-3bda-4682-927c-938401f44eb3\",\n              userId: \"cme9nwi6o0000i23zggulxemk\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e56df657-3bda-4682-927c-938401f44eb3\",\n              userId: \"cme9nwi6o0000i23zggulxemk\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"new new test test\\\" will be starting on Friday, August 15, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb25j91000hi29vyj4d5xl6\",\n                examTitle: \"new new test test\",\n                examCategory: \"New Category\",\n                scheduledStart: new Date(\"2025-08-15T08:01:00.000Z\"),\n                scheduledEnd: new Date(\"2025-09-06T08:01:00.000Z\"),\n                price: new Prisma.Decimal(\"11\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 12)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:08:28"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/auth/refresh not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/auth/refresh not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-14 03:15:17","url":"/api/v1/auth/refresh","userId":"anonymous"}
{"clientVersion":"6.13.0","code":"P2002","level":"error","message":"Login failed \nInvalid `prisma.userSession.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/authService.js:41:37\n\n  38 const expiresAt = new Date();\n  39 expiresAt.setDate(expiresAt.getDate() + (rememberMe ? 30 : 7)); // 30 days or 7 days\n  40 \n→ 41 return await prisma.userSession.create(\nUnique constraint failed on the fields: (`sessionToken`)","meta":{"modelName":"UserSession","target":["sessionToken"]},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.userSession.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/authService.js:41:37\n\n  38 const expiresAt = new Date();\n  39 expiresAt.setDate(expiresAt.getDate() + (rememberMe ? 30 : 7)); // 30 days or 7 days\n  40 \n→ 41 return await prisma.userSession.create(\nUnique constraint failed on the fields: (`sessionToken`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AuthService.createUserSession (/home/ahmadi/Desktop/mock/src/services/authService.js:41:12)\n    at async login (/home/ahmadi/Desktop/mock/src/controllers/authController.js:320:23)","timestamp":"2025-08-14 03:15:17"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/auth not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/auth not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-14 03:15:34","url":"/api/v1/auth","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/auth/refresh not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/auth/refresh not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-14 03:15:34","url":"/api/v1/auth/refresh","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/auth not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/auth not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-14 03:15:44","url":"/api/v1/auth","userId":"anonymous"}
{"ip":"127.0.0.1","level":"error","message":"Application Error Route /api/v1/auth/refresh not found","method":"POST","service":"mock-test-api","stack":"Error: Route /api/v1/auth/refresh not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-14 03:15:44","url":"/api/v1/auth/refresh","userId":"anonymous"}
{"clientVersion":"6.13.0","code":"P2002","level":"error","message":"Login failed \nInvalid `prisma.userSession.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/authService.js:41:37\n\n  38 const expiresAt = new Date();\n  39 expiresAt.setDate(expiresAt.getDate() + (rememberMe ? 30 : 7)); // 30 days or 7 days\n  40 \n→ 41 return await prisma.userSession.create(\nUnique constraint failed on the fields: (`sessionToken`)","meta":{"modelName":"UserSession","target":["sessionToken"]},"name":"PrismaClientKnownRequestError","service":"mock-test-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.userSession.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/authService.js:41:37\n\n  38 const expiresAt = new Date();\n  39 expiresAt.setDate(expiresAt.getDate() + (rememberMe ? 30 : 7)); // 30 days or 7 days\n  40 \n→ 41 return await prisma.userSession.create(\nUnique constraint failed on the fields: (`sessionToken`)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7459)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AuthService.createUserSession (/home/ahmadi/Desktop/mock/src/services/authService.js:41:12)\n    at async login (/home/ahmadi/Desktop/mock/src/controllers/authController.js:320:23)","timestamp":"2025-08-14 03:15:44"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"650594b7-0364-40fe-adee-a0f663788420\",\n              userId: \"cmdyne4fk000si2x0zl74wvll\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"650594b7-0364-40fe-adee-a0f663788420\",\n              userId: \"cmdyne4fk000si2x0zl74wvll\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 0)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e317e3b6-954a-4400-b40b-fde58727e775\",\n              userId: \"cme45zb97000bi2e4g7811w5d\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e317e3b6-954a-4400-b40b-fde58727e775\",\n              userId: \"cme45zb97000bi2e4g7811w5d\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 1)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"5c9a4bfb-067f-4783-b3b7-70e5e0d1f5a0\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"5c9a4bfb-067f-4783-b3b7-70e5e0d1f5a0\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 2)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"986524df-29fa-4c40-a258-2d667b8db2dc\",\n              userId: \"cme9krpsn0008i2udt2oczge2\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"986524df-29fa-4c40-a258-2d667b8db2dc\",\n              userId: \"cme9krpsn0008i2udt2oczge2\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 3)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"78b8ac75-e16e-493f-8579-51b0459a73ff\",\n              userId: \"cme9lbonu0009i2udsxd6hqs3\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"78b8ac75-e16e-493f-8579-51b0459a73ff\",\n              userId: \"cme9lbonu0009i2udsxd6hqs3\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 4)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"2b4501ef-82ee-4739-9b18-f998f7545a5a\",\n              userId: \"cme9ny0dv0000i23quhhtxgyn\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"2b4501ef-82ee-4739-9b18-f998f7545a5a\",\n              userId: \"cme9ny0dv0000i23quhhtxgyn\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 5)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"1fb1d0f5-2c77-4fd6-91d4-7a31021f1554\",\n              userId: \"cme5afwd90000i20ahd3dwb4n\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"1fb1d0f5-2c77-4fd6-91d4-7a31021f1554\",\n              userId: \"cme5afwd90000i20ahd3dwb4n\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 6)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"5fa2a225-3245-4f34-90c7-e3e0e6dfd96e\",\n              userId: \"cme45ibg2000ci2blpwwhmxvt\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"5fa2a225-3245-4f34-90c7-e3e0e6dfd96e\",\n              userId: \"cme45ibg2000ci2blpwwhmxvt\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 7)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"d3f99706-717b-448a-afd8-e30957b12b42\",\n              userId: \"cme9mk1yg0006i25r86e1jn18\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"d3f99706-717b-448a-afd8-e30957b12b42\",\n              userId: \"cme9mk1yg0006i25r86e1jn18\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 8)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"52eb6598-5eb2-40e0-835e-0ea10278b3d1\",\n              userId: \"cme9msg2g0007i25r8cfv7l90\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"52eb6598-5eb2-40e0-835e-0ea10278b3d1\",\n              userId: \"cme9msg2g0007i25r8cfv7l90\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 9)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"4878a0a5-3c8c-467f-806a-d308458af53a\",\n              userId: \"cme9nkf290000i2jx6zgia1oo\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"4878a0a5-3c8c-467f-806a-d308458af53a\",\n              userId: \"cme9nkf290000i2jx6zgia1oo\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 10)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"06bbd790-4f5d-4321-8f35-f126e418e76c\",\n              userId: \"cme9nmdiu0001i2jxa73jol8k\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"06bbd790-4f5d-4321-8f35-f126e418e76c\",\n              userId: \"cme9nmdiu0001i2jxa73jol8k\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 11)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e2b11312-600f-4ac0-a5e9-1c3e59ff81ac\",\n              userId: \"cme9nwi6o0000i23zggulxemk\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e2b11312-600f-4ac0-a5e9-1c3e59ff81ac\",\n              userId: \"cme9nwi6o0000i23zggulxemk\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 12)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"9a953106-d11e-4278-9bdf-6ac19d357cd9\",\n              userId: \"cme9prcx80000i2mz4cxn3kpq\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"9a953106-d11e-4278-9bdf-6ac19d357cd9\",\n              userId: \"cme9prcx80000i2mz4cxn3kpq\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 13)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"b607e759-6c57-4131-ba63-aea17265c3a4\",\n              userId: \"cme45ybcd0004i2e48zjke01b\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"b607e759-6c57-4131-ba63-aea17265c3a4\",\n              userId: \"cme45ybcd0004i2e48zjke01b\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 14)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e2c7523b-bae3-48a0-b475-100f88195f61\",\n              userId: \"cme9puj4e0000i26xcbhenqyl\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e2c7523b-bae3-48a0-b475-100f88195f61\",\n              userId: \"cme9puj4e0000i26xcbhenqyl\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 15)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"49d3c88a-a33e-4771-89b5-93528f12ddb5\",\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"49d3c88a-a33e-4771-89b5-93528f12ddb5\",\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 16)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"3df6e26b-6fa1-4b33-a20d-eb24b19166c9\",\n              userId: \"cme9pvmku0000i2tvtbg0pzyp\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"3df6e26b-6fa1-4b33-a20d-eb24b19166c9\",\n              userId: \"cme9pvmku0000i2tvtbg0pzyp\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"dasd\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2hfnk000bi2gj04628oqk\",\n                examTitle: \"dasd\",\n                examCategory: \"ahmad1\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-27T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 17)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:130:38)","timestamp":"2025-08-14 03:17:43"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e292f6d7-e2e9-4a90-b6fe-3954de85ec2f\",\n              userId: \"test-user-id\",\n              type: \"TEST_NOTIFICATION\",\n                    ~~~~~~~~~~~~~~~~~~~\n              title: \"🧪 Test Notification\",\n              message: \"This is a test notification to verify the system is working\",\n              data: {},\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"e292f6d7-e2e9-4a90-b6fe-3954de85ec2f\",\n              userId: \"test-user-id\",\n              type: \"TEST_NOTIFICATION\",\n                    ~~~~~~~~~~~~~~~~~~~\n              title: \"🧪 Test Notification\",\n              message: \"This is a test notification to verify the system is working\",\n              data: {},\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async /home/ahmadi/Desktop/mock/src/routes/notifications.js:137:20","timestamp":"2025-08-14 03:20:45"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"627e1c51-b5aa-4914-993f-3e24adcbbb53\",\n              userId: \"cme9krpsn0008i2udt2oczge2\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"627e1c51-b5aa-4914-993f-3e24adcbbb53\",\n              userId: \"cme9krpsn0008i2udt2oczge2\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 3)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"8e2858a3-9922-417c-8211-ea813a0bb979\",\n              userId: \"cme9lbonu0009i2udsxd6hqs3\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"8e2858a3-9922-417c-8211-ea813a0bb979\",\n              userId: \"cme9lbonu0009i2udsxd6hqs3\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 4)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"741cbdcc-62fc-4359-a784-24256ba2a503\",\n              userId: \"cme9ny0dv0000i23quhhtxgyn\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"741cbdcc-62fc-4359-a784-24256ba2a503\",\n              userId: \"cme9ny0dv0000i23quhhtxgyn\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 5)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"836989df-e96f-48f2-9242-9dd18c1e00b4\",\n              userId: \"cme5afwd90000i20ahd3dwb4n\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"836989df-e96f-48f2-9242-9dd18c1e00b4\",\n              userId: \"cme5afwd90000i20ahd3dwb4n\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 6)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"10e04c3e-13d0-4de5-b362-bda9f1534e9b\",\n              userId: \"cme45ibg2000ci2blpwwhmxvt\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"10e04c3e-13d0-4de5-b362-bda9f1534e9b\",\n              userId: \"cme45ibg2000ci2blpwwhmxvt\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 7)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"ed52667c-fe56-4c25-9a99-2d6b52cb6f73\",\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"ed52667c-fe56-4c25-9a99-2d6b52cb6f73\",\n              userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 8)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"7aed05b1-7b24-48b5-8bfa-e5172de4539e\",\n              userId: \"cme9mk1yg0006i25r86e1jn18\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"7aed05b1-7b24-48b5-8bfa-e5172de4539e\",\n              userId: \"cme9mk1yg0006i25r86e1jn18\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 9)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"fc588c3f-1205-4d2b-a574-c1af4dbf51c0\",\n              userId: \"cme9msg2g0007i25r8cfv7l90\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"fc588c3f-1205-4d2b-a574-c1af4dbf51c0\",\n              userId: \"cme9msg2g0007i25r8cfv7l90\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 10)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"c544158c-96d0-4596-b2d5-841a39acca39\",\n              userId: \"cme9nkf290000i2jx6zgia1oo\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"c544158c-96d0-4596-b2d5-841a39acca39\",\n              userId: \"cme9nkf290000i2jx6zgia1oo\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 11)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"b38517c7-31e1-449e-9d64-af8e885fecf5\",\n              userId: \"cme9nmdiu0001i2jxa73jol8k\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"b38517c7-31e1-449e-9d64-af8e885fecf5\",\n              userId: \"cme9nmdiu0001i2jxa73jol8k\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 12)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"9c29b366-3259-46e7-b8ce-7d31dbfbe2db\",\n              userId: \"cme9nwi6o0000i23zggulxemk\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"9c29b366-3259-46e7-b8ce-7d31dbfbe2db\",\n              userId: \"cme9nwi6o0000i23zggulxemk\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 13)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"ff010707-bb23-4dc0-a936-94d1ef72477d\",\n              userId: \"cme9prcx80000i2mz4cxn3kpq\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"ff010707-bb23-4dc0-a936-94d1ef72477d\",\n              userId: \"cme9prcx80000i2mz4cxn3kpq\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 14)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"bbbe9068-c2e8-4bd7-8ee4-ca2d35abfd08\",\n              userId: \"cme45ybcd0004i2e48zjke01b\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"bbbe9068-c2e8-4bd7-8ee4-ca2d35abfd08\",\n              userId: \"cme45ybcd0004i2e48zjke01b\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 15)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"ce332f87-3ca8-4975-8f4d-c96bb2bc3220\",\n              userId: \"cme9puj4e0000i26xcbhenqyl\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"ce332f87-3ca8-4975-8f4d-c96bb2bc3220\",\n              userId: \"cme9puj4e0000i26xcbhenqyl\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 16)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"c2954b50-1bae-4f11-a3cb-d6b19758f925\",\n              userId: \"cme9pvmku0000i2tvtbg0pzyp\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"c2954b50-1bae-4f11-a3cb-d6b19758f925\",\n              userId: \"cme9pvmku0000i2tvtbg0pzyp\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 17)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"7277cf86-d5cb-40de-8ca9-b9e8d1453ceb\",\n              userId: \"cmdyne4fk000si2x0zl74wvll\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"7277cf86-d5cb-40de-8ca9-b9e8d1453ceb\",\n              userId: \"cmdyne4fk000si2x0zl74wvll\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 0)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"78726221-f26a-429c-876f-b46eca635e2a\",\n              userId: \"cme45zb97000bi2e4g7811w5d\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"78726221-f26a-429c-876f-b46eca635e2a\",\n              userId: \"cme45zb97000bi2e4g7811w5d\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 1)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"clientVersion":"6.13.0","level":"error","message":"Failed to store notification \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"26039063-a5d1-4801-85e3-000871869fe2\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.notification.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:54\n\n  150  */\n  151 async storeNotification(notificationData) {\n  152   try {\n→ 153     const notification = await prisma.notification.create({\n            data: {\n              id: \"26039063-a5d1-4801-85e3-000871869fe2\",\n              userId: \"cme41pmim0000i2iseevv6n8t\",\n              type: \"NEW_EXAM_AVAILABLE\",\n                    ~~~~~~~~~~~~~~~~~~~~\n              title: \"📚 New Exam Available\",\n              message: \"New exam \\\"sadasassadas\\\" will be starting on Thursday, August 14, 2025. You can attend this exam!\",\n              data: {\n                examId: \"cmeb2s87y0005i2wewifvrugt\",\n                examTitle: \"sadasassadas\",\n                examCategory: \"Ahmadd\",\n                scheduledStart: new Date(\"2025-08-14T17:00:00.000Z\"),\n                scheduledEnd: new Date(\"2025-08-26T14:00:00.000Z\"),\n                price: new Prisma.Decimal(\"0.05\"),\n                currency: \"USD\"\n              },\n              priority: \"normal\",\n              status: \"UNREAD\",\n              scheduleAt: null,\n              expiresAt: null\n            }\n          })\n\nInvalid value for argument `type`. Expected NotificationType.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async AdvancedNotificationService.storeNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:153:28)\n    at async AdvancedNotificationService.sendNotification (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:69:26)\n    at async Promise.all (index 2)\n    at async AdvancedNotificationService.notifyStudentsNewExam (/home/ahmadi/Desktop/mock/src/services/advancedNotificationService.js:600:23)\n    at async ExamService.createExam (/home/ahmadi/Desktop/mock/src/services/examService.js:133:38)","timestamp":"2025-08-14 03:26:07"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:167:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:127:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-14 11:00:01"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:167:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:127:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-14 11:15:00"}
{"level":"error","message":"Failed to record reminder sent Cannot read properties of undefined (reading 'create')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at NotificationSchedulerService.recordReminderSent (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:167:36)\n    at NotificationSchedulerService.processExamReminders (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:127:22)\n    at async jobs.set.cron.schedule.scheduled [as _execution] (/home/ahmadi/Desktop/mock/src/services/notificationSchedulerService.js:27:7)","timestamp":"2025-08-14 11:45:00"}
{"ip":"192.168.0.105","level":"error","message":"Application Error Route /api/v1/auth/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/auth/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-14 23:17:23","url":"/api/v1/auth/health","userId":"anonymous"}
{"ip":"192.168.0.105","level":"error","message":"Application Error Route / not found","method":"GET","service":"mock-test-api","stack":"Error: Route / not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:148:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-14 23:17:55","url":"/","userId":"anonymous"}
{"ip":"192.168.0.105","level":"error","message":"Application Error Route /api/v1/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/src/server.js:148:3\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)","timestamp":"2025-08-14 23:18:30","url":"/api/v1/health","userId":"anonymous"}
