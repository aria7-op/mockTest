{"level":"error","message":"Get questions error: adminService is not defined","service":"mock-test-api","stack":"ReferenceError: adminService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:937:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:41"}
{"level":"error","message":"Get categories error: examService is not defined","service":"mock-test-api","stack":"ReferenceError: examService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:713:28\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:41"}
{"level":"error","message":"Get questions error: adminService is not defined","service":"mock-test-api","stack":"ReferenceError: adminService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:937:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:42"}
{"level":"error","message":"Get categories error: examService is not defined","service":"mock-test-api","stack":"ReferenceError: examService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:713:28\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:42"}
{"level":"error","message":"Get questions error: adminService is not defined","service":"mock-test-api","stack":"ReferenceError: adminService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:937:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:44"}
{"level":"error","message":"Get categories error: examService is not defined","service":"mock-test-api","stack":"ReferenceError: examService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:713:28\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:44"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:45"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:46"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:49"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:35:53"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:23"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:24"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:26"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:36:30"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:01"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:02"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:04"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:08"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:38"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:39"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:42"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:37:46"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:16"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:17"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:19"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:23"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:53"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:54"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:38:56"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:00"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:30"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:31"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:33"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:39:37"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:07"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:08"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:10"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:14"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:44"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:45"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:47"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:40:51"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:21"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:22"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:24"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:41:28"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:01"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:02"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:04"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:08"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:38"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:39"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:41"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:42:45"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:16"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:17"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:19"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:23"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:53"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:54"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:43:56"}
{"level":"error","message":"Get users error: userService is not defined","service":"mock-test-api","stack":"ReferenceError: userService is not defined\n    at /home/ahmadi/Desktop/mock/server-secure.js:679:24\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at /home/ahmadi/Desktop/mock/server-secure.js:84:9\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at authenticateToken (/home/ahmadi/Desktop/mock/server-secure.js:58:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-08-03 12:44:00"}
{"code":"42703","file":"parse_target.c","length":128,"level":"error","line":"1065","message":"Database query error: column \"first_name\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"first_name\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:05:54"}
{"code":"42703","file":"parse_target.c","length":128,"level":"error","line":"1065","message":"Register first admin error: column \"first_name\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"first_name\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:05:54"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:08:39"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:08:39"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:09:28"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:09:28"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:10:26"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:10:26"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:13:38"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:13:38"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:15:32"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:15:32"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Database query error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:17:01"}
{"code":"42703","file":"parse_target.c","length":127,"level":"error","line":"1065","message":"Register first admin error: column \"firstname\" of relation \"users\" does not exist","name":"error","position":"37","routine":"checkInsertTargets","service":"mock-test-api","severity":"ERROR","stack":"error: column \"firstname\" of relation \"users\" does not exist\n    at /home/ahmadi/Desktop/mock/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DatabaseService.query (/home/ahmadi/Desktop/mock/src/config/database-simple.js:51:28)\n    at async DatabaseService.create (/home/ahmadi/Desktop/mock/src/config/database-simple.js:125:24)\n    at async /home/ahmadi/Desktop/mock/server-secure.js:249:18","timestamp":"2025-08-03 14:17:01"}
{"clientVersion":"6.13.0","errorCode":"P1012","level":"error","message":"Database connection failed: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:154:5)","timestamp":"2025-08-03 15:05:47"}
{"clientVersion":"6.13.0","errorCode":"P1012","level":"error","message":"Database connection failed: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: \u001b[1;91merror\u001b[0m: \u001b[1mEnvironment variable not found: DATABASE_URL.\u001b[0m\n  \u001b[1;94m-->\u001b[0m  \u001b[4mschema.prisma:11\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\u001b[1;94m10 | \u001b[0m  provider = \"postgresql\"\n\u001b[1;94m11 | \u001b[0m  url      = \u001b[1;91menv(\"DATABASE_URL\")\u001b[0m\n\u001b[1;94m   | \u001b[0m\n\nValidation Error Count: 1\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:154:5)","timestamp":"2025-08-03 15:07:09"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/auth/health not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/auth/health not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-03 15:10:54","url":"/api/v1/auth/health","userId":"anonymous"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:47:57"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:31"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:32"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:32"}
{"ip":"::1","level":"error","message":"Application Error Route /api/v1/admin/analytics/dashboard not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/analytics/dashboard not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-03 15:48:34","url":"/api/v1/admin/analytics/dashboard","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:34"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:48:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:08"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:09"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:09"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:11"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:11"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:45"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:45"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:46"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:48"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:48"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:49:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:23"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:24"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:26"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:50:30"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:00"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:00"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:03"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:03"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:07"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:07"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:37"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:38"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:40"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:51:44"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:14"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:14"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:15"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:17"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:21"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:51"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:54"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get all questions failed \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.question.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/services/questionService.js:123:25\n\n  120 }\n  121 \n  122 const [questions, total] = await Promise.all([\n→ 123   prisma.question.findMany({\n          where: {\n            isActive: false\n          },\n          include: {\n            options: {\n              select: {\n                id: true,\n                text: true,\n                isCorrect: true\n              }\n            },\n            examCategory: {\n              select: {\n                name: true,\n                color: true\n              }\n            },\n            _count: {\n              select: {\n                questionResponses: true,\n                ~~~~~~~~~~~~~~~~~\n        ?       options?: true,\n        ?       images?: true,\n        ?       tags?: true,\n        ?       examQuestions?: true,\n        ?       responses?: true,\n        ?       scores?: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: \"desc\"\n          },\n          skip: 0,\n          take: 20\n        })\n\nUnknown field `questionResponses` for select statement on model `QuestionCountOutputType`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async Promise.all (index 0)\n    at async QuestionService.getAllQuestions (/home/ahmadi/Desktop/mock/src/services/questionService.js:122:34)\n    at async getAllQuestions (/home/ahmadi/Desktop/mock/src/controllers/adminController.js:516:25)","timestamp":"2025-08-03 15:52:58"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-03 23:59:12"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:04","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:05","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:08","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:12","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:20","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:21","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:23","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:27","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:31","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:32","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:34","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:44:38","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:09","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:10","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:12","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate= not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at /home/ahmadi/Desktop/mock/src/middleware/auth.js:140:5","timestamp":"2025-08-04 00:45:16","url":"/api/v1/admin/bookings?status=&examCategoryId=&startDate=&endDate=","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 00:46:21"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:27","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:28","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:30","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:06:34","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:08"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:09","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:10","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:12","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:16","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:26"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:37"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:07:49"}
{"ip":"::ffff:127.0.0.1","level":"error","message":"Application Error Route /api/v1/analytics/categories/undefined not found","method":"GET","service":"mock-test-api","stack":"Error: Route /api/v1/analytics/categories/undefined not found\n    at notFoundHandler (/home/ahmadi/Desktop/mock/src/middleware/notFoundHandler.js:2:17)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:328:13)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:346:12)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:280:10)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:646:15\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:265:14)\n    at Function.handle (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:175:3)","timestamp":"2025-08-04 01:07:56","url":"/api/v1/analytics/categories/undefined","userId":"cmdw3a9vs0000i2jijo7g0t4t"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:33"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:33"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:47"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:09:47"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:10:30"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:10:34"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:10:36"}
{"code":"EIO","errno":-5,"level":"error","message":"Uncaught Exception: EIO: i/o error, write","service":"mock-test-api","stack":"Error: EIO: i/o error, write\n    at writeSync (node:fs:934:3)\n    at SyncWriteStream._write (node:internal/fs/sync_write_stream:27:5)\n    at writeOrBuffer (node:internal/streams/writable:572:12)\n    at _write (node:internal/streams/writable:501:10)\n    at Writable.write (node:internal/streams/writable:510:10)\n    at Console.log (/home/ahmadi/Desktop/mock/node_modules/winston/lib/winston/transports/console.js:87:23)\n    at Console._write (/home/ahmadi/Desktop/mock/node_modules/winston-transport/modern.js:103:17)\n    at doWrite (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:390:139)\n    at writeOrBuffer (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:381:5)\n    at Writable.write (/home/ahmadi/Desktop/mock/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:302:11)","syscall":"write","timestamp":"2025-08-04 01:13:48"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:13:48"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:14:00"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:14:15"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:14:29"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:18:56"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:18:57"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:18:59"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:03"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:05"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:06"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:09"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:13"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:27"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:28"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:30"}
{"level":"error","message":"Get exam details failed examService.getExamDetails is not a function","service":"mock-test-api","stack":"TypeError: examService.getExamDetails is not a function\n    at getExamDetails (/home/ahmadi/Desktop/mock/src/controllers/examController.js:48:38)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:376:14)","timestamp":"2025-08-04 01:19:34"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:20:06"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:20:26"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:20:50"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:16"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:26"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:36"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:49"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:21:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:22:09.117Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:22:09.117Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:22:09"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:22:11"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:22:29"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:22:55"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:23:42"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:23:50"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:52.718Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:52.718Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:52"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:53.877Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:53.877Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:53"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:55.935Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:55.935Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:55"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:58.257Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:58.257Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:58"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:59.501Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:24:59.501Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:24:59"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:01.521Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:01.521Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:25:01"}
{"clientVersion":"6.13.0","level":"error","message":"Get upcoming exams failed \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:05.602Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.exam.findMany()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:47\n\n  42  */\n  43 async getUpcomingExams(req, res) {\n  44   try {\n→ 45     const upcomingExams = await prisma.exam.findMany({\n           where: {\n             isActive: true,\n             isPublic: true,\n             startDate: {\n             ~~~~~~~~~\n               gte: new Date(\"2025-08-04T05:25:05.602Z\")\n             },\n         ?   AND?: ExamWhereInput | ExamWhereInput[],\n         ?   OR?: ExamWhereInput[],\n         ?   NOT?: ExamWhereInput | ExamWhereInput[],\n         ?   id?: StringFilter | String,\n         ?   title?: StringFilter | String,\n         ?   description?: StringNullableFilter | String | Null,\n         ?   examCategoryId?: StringFilter | String,\n         ?   duration?: IntFilter | Int,\n         ?   totalMarks?: IntFilter | Int,\n         ?   passingMarks?: IntFilter | Int,\n         ?   price?: DecimalFilter | Decimal,\n         ?   currency?: StringFilter | String,\n         ?   allowRetakes?: BoolFilter | Boolean,\n         ?   maxRetakes?: IntFilter | Int,\n         ?   showResults?: BoolFilter | Boolean,\n         ?   showAnswers?: BoolFilter | Boolean,\n         ?   randomizeQuestions?: BoolFilter | Boolean,\n         ?   randomizeOptions?: BoolFilter | Boolean,\n         ?   questionOverlapPercentage?: FloatFilter | Float,\n         ?   createdBy?: StringFilter | String,\n         ?   approvedBy?: StringNullableFilter | String | Null,\n         ?   approvedAt?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledStart?: DateTimeNullableFilter | DateTime | Null,\n         ?   scheduledEnd?: DateTimeNullableFilter | DateTime | Null,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   examCategory?: ExamCategoryScalarRelationFilter | ExamCategoryWhereInput,\n         ?   creator?: UserScalarRelationFilter | UserWhereInput,\n         ?   approver?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n         ?   questions?: ExamQuestionListRelationFilter,\n         ?   bookings?: ExamBookingListRelationFilter,\n         ?   attempts?: ExamAttemptListRelationFilter,\n         ?   examScores?: ExamScoreListRelationFilter,\n         ?   certificates?: CertificateListRelationFilter\n           },\n           include: {\n             examCategory: {\n               select: {\n                 name: true,\n                 color: true\n               }\n             }\n           },\n           orderBy: {\n             startDate: \"asc\"\n           },\n           take: 10\n         })\n\nUnknown argument `startDate`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async getUpcomingExams (/home/ahmadi/Desktop/mock/src/controllers/examController.js:45:29)","timestamp":"2025-08-04 01:25:05"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:25:31"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:25:39"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:35:12"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:36:43"}
{"address":"::","code":"EADDRINUSE","errno":-98,"level":"error","message":"Uncaught Exception: listen EADDRINUSE: address already in use :::5000","port":5000,"service":"mock-test-api","stack":"Error: listen EADDRINUSE: address already in use :::5000\n    at Server.setupListenHandle [as _listen2] (node:net:1908:16)\n    at listenInCluster (node:net:1965:12)\n    at Server.listen (node:net:2067:7)\n    at startServer (/home/ahmadi/Desktop/mock/src/server.js:229:12)","syscall":"listen","timestamp":"2025-08-04 01:37:21"}
{"clientVersion":"6.13.0","level":"error","message":"Admin create booking failed \nInvalid `tx.examBooking.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:622:49\n\n  619 // Create booking with transaction\n  620 const booking = await prisma.$transaction(async (tx) => {\n  621   // Create the booking\n→ 622   const newBooking = await tx.examBooking.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            scheduledAt: new Date(\"2025-08-05T10:00:00.000Z\"),\n            status: \"CONFIRMED\",\n            totalAmount: new Prisma.Decimal(\"9.99\"),\n            currency: \"USD\",\n            notes: \"Admin scheduled test\",\n            createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n            ~~~~~~~~~\n        ?   id?: String,\n        ?   bookingDate?: DateTime,\n        ?   paymentId?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   payment?: PaymentUncheckedCreateNestedOneWithoutBookingInput,\n        ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutBookingInput\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            }\n          }\n        })\n\nUnknown argument `createdBy`. Did you mean `createdAt`? Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `tx.examBooking.create()` invocation in\n/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:622:49\n\n  619 // Create booking with transaction\n  620 const booking = await prisma.$transaction(async (tx) => {\n  621   // Create the booking\n→ 622   const newBooking = await tx.examBooking.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            scheduledAt: new Date(\"2025-08-05T10:00:00.000Z\"),\n            status: \"CONFIRMED\",\n            totalAmount: new Prisma.Decimal(\"9.99\"),\n            currency: \"USD\",\n            notes: \"Admin scheduled test\",\n            createdBy: \"cmdw3a9vs0000i2jijo7g0t4t\",\n            ~~~~~~~~~\n        ?   id?: String,\n        ?   bookingDate?: DateTime,\n        ?   paymentId?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   payment?: PaymentUncheckedCreateNestedOneWithoutBookingInput,\n        ?   attempts?: ExamAttemptUncheckedCreateNestedManyWithoutBookingInput\n          },\n          include: {\n            exam: {\n              include: {\n                examCategory: true\n              }\n            },\n            user: {\n              select: {\n                id: true,\n                email: true,\n                firstName: true,\n                lastName: true\n              }\n            }\n          }\n        })\n\nUnknown argument `createdBy`. Did you mean `createdAt`? Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async /home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:622:28\n    at async Proxy._transactionWithCallback (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:8173)\n    at async createBookingForUser (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:620:23)","timestamp":"2025-08-04 02:26:16"}
{"level":"error","message":"Exam booking update validation error next is not a function","service":"mock-test-api","stack":"TypeError: next is not a function\n    at validateBookingUpdate (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:70:5)\n    at updateBooking (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:287:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)","timestamp":"2025-08-04 03:04:01"}
{"level":"error","message":"Update booking failed Cannot read properties of undefined (reading 'status')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'status')\n    at validateBookingUpdate (/home/ahmadi/Desktop/mock/src/validators/examBookingValidator.js:73:9)\n    at updateBooking (/home/ahmadi/Desktop/mock/src/controllers/examBookingController.js:287:32)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/ahmadi/Desktop/mock/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/layer.js:95:5)\n    at /home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:284:15\n    at param (/home/ahmadi/Desktop/mock/node_modules/express/lib/router/index.js:365:14)","timestamp":"2025-08-04 03:04:01"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-04 03:24:54"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-04 03:25:03"}
{"clientVersion":"6.13.0","errorCode":"P1001","level":"error","message":"Database connection failed: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.","name":"PrismaClientInitializationError","service":"mock-test-api","stack":"PrismaClientInitializationError: Can't reach database server at `localhost:5432`\n\nPlease make sure your database server is running at `localhost:5432`.\n    at r (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:112:2770)\n    at async Database.connect (/home/ahmadi/Desktop/mock/src/config/database.js:34:7)\n    at async startServer (/home/ahmadi/Desktop/mock/src/server.js:226:5)","timestamp":"2025-08-04 03:25:44"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.522Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.522Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.522Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.522Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:21","timestamp":"2025-08-04 03:30:37"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.834Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.834Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:30:37.834Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:30:37.834Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:21","timestamp":"2025-08-04 03:30:37"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:40.760Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:40.760Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:40.760Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:40.760Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:40"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.546Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.546Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.546Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.546Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:41"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.847Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.847Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:41.847Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:41.847Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:41"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:42.612Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:42.612Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:42.612Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:42.612Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:42"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:49.412Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:49.412Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:49.412Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:49.412Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:49"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:50.519Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:50.519Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:31:50.519Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:31:50.519Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:31:50"}
{"clientVersion":"6.13.0","level":"error","message":"Start exam attempt failed \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:32:09.799Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:32:09.799Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:348:48\n\n  345 });\n  346 \n  347 // Create exam attempt\n→ 348 const attempt = await prisma.examAttempt.create({\n        data: {\n          examId: \"exam_001\",\n          userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n          startTime: new Date(\"2025-08-04T07:32:09.799Z\"),\n          ~~~~~~~~~\n          endTime: new Date(\"2025-08-04T08:32:09.799Z\"),\n          status: \"IN_PROGRESS\",\n          totalQuestions: 0,\n          currentQuestionIndex: 0,\n      ?   id?: String,\n      ?   bookingId?: String | Null,\n      ?   startedAt?: DateTime,\n      ?   completedAt?: DateTime | Null,\n      ?   totalMarks?: Int,\n      ?   obtainedMarks?: Int,\n      ?   percentage?: Float,\n      ?   isPassed?: Boolean,\n      ?   timeSpent?: Int | Null,\n      ?   ipAddress?: String | Null,\n      ?   userAgent?: String | Null,\n      ?   isCheating?: Boolean,\n      ?   cheatingReason?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime,\n      ?   responses?: QuestionResponseUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   questionScores?: QuestionScoreUncheckedCreateNestedManyWithoutAttemptInput,\n      ?   examScore?: ExamScoreUncheckedCreateNestedOneWithoutAttemptInput,\n      ?   certificate?: CertificateUncheckedCreateNestedOneWithoutAttemptInput\n        }\n      })\n\nUnknown argument `startTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.startExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:348:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:13:20","timestamp":"2025-08-04 03:32:09"}
{"clientVersion":"6.13.0","level":"error","message":"Complete exam attempt failed \nInvalid `prisma.examAttempt.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:504:55\n\n  501 const isPassed = percentage >= attempt.exam.passingMarks;\n  502 \n  503 // Update attempt\n→ 504 const updatedAttempt = await prisma.examAttempt.update({\n        where: {\n          id: \"cmdwssd4n0001i27odi4jos3q\"\n        },\n        data: {\n          status: \"COMPLETED\",\n          endTime: new Date(\"2025-08-04T07:37:38.690Z\"),\n          ~~~~~~~\n          score: 0,\n          percentage: NaN,\n          correctAnswers: 0,\n          isPassed: false,\n          completedAt: new Date(\"2025-08-04T07:37:38.690Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   startedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   obtainedMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   timeSpent?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   ipAddress?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   userAgent?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   isCheating?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   cheatingReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   user?: UserUpdateOneRequiredWithoutExamAttemptsNestedInput,\n      ?   exam?: ExamUpdateOneRequiredWithoutAttemptsNestedInput,\n      ?   booking?: ExamBookingUpdateOneWithoutAttemptsNestedInput,\n      ?   responses?: QuestionResponseUpdateManyWithoutAttemptNestedInput,\n      ?   questionScores?: QuestionScoreUpdateManyWithoutAttemptNestedInput,\n      ?   examScore?: ExamScoreUpdateOneWithoutAttemptNestedInput,\n      ?   certificate?: CertificateUpdateOneWithoutAttemptNestedInput\n        }\n      })\n\nUnknown argument `endTime`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.examAttempt.update()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:504:55\n\n  501 const isPassed = percentage >= attempt.exam.passingMarks;\n  502 \n  503 // Update attempt\n→ 504 const updatedAttempt = await prisma.examAttempt.update({\n        where: {\n          id: \"cmdwssd4n0001i27odi4jos3q\"\n        },\n        data: {\n          status: \"COMPLETED\",\n          endTime: new Date(\"2025-08-04T07:37:38.690Z\"),\n          ~~~~~~~\n          score: 0,\n          percentage: NaN,\n          correctAnswers: 0,\n          isPassed: false,\n          completedAt: new Date(\"2025-08-04T07:37:38.690Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   startedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   totalMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   obtainedMarks?: Int | IntFieldUpdateOperationsInput,\n      ?   timeSpent?: Int | NullableIntFieldUpdateOperationsInput | Null,\n      ?   ipAddress?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   userAgent?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   isCheating?: Boolean | BoolFieldUpdateOperationsInput,\n      ?   cheatingReason?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   user?: UserUpdateOneRequiredWithoutExamAttemptsNestedInput,\n      ?   exam?: ExamUpdateOneRequiredWithoutAttemptsNestedInput,\n      ?   booking?: ExamBookingUpdateOneWithoutAttemptsNestedInput,\n      ?   responses?: QuestionResponseUpdateManyWithoutAttemptNestedInput,\n      ?   questionScores?: QuestionScoreUpdateManyWithoutAttemptNestedInput,\n      ?   examScore?: ExamScoreUpdateOneWithoutAttemptNestedInput,\n      ?   certificate?: CertificateUpdateOneWithoutAttemptNestedInput\n        }\n      })\n\nUnknown argument `endTime`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:504:30)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:63:20","timestamp":"2025-08-04 03:37:38"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:558:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:493:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:39:53"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"level":"error","message":"Error checking answer: Cannot read properties of undefined (reading 'filter')","service":"mock-test-api","stack":"TypeError: Cannot read properties of undefined (reading 'filter')\n    at ExamService.checkAnswer (/home/ahmadi/Desktop/mock/src/services/examService.js:568:10)\n    at ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:503:32)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:41:23"}
{"clientVersion":"6.13.0","level":"error","message":"Complete exam attempt failed \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:528:48\n\n  525 // Create certificate if passed\n  526 let certificate = null;\n  527 if (isPassed) {\n→ 528   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwszh4r0001i2lv0eckdnij\",\n            certificateNumber: \"CERT-1754293392162-w0xv5shag\",\n            issuedAt: new Date(\"2025-08-04T07:43:12.162Z\"),\n            expiresAt: new Date(\"2026-08-04T07:43:12.162Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:528:48\n\n  525 // Create certificate if passed\n  526 let certificate = null;\n  527 if (isPassed) {\n→ 528   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwszh4r0001i2lv0eckdnij\",\n            certificateNumber: \"CERT-1754293392162-w0xv5shag\",\n            issuedAt: new Date(\"2025-08-04T07:43:12.162Z\"),\n            expiresAt: new Date(\"2026-08-04T07:43:12.162Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:528:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:43:12"}
{"attemptId":"cmdwt1tok0001i2knojxwe10f","error":"\nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:562:48\n\n  559 let certificate = null;\n  560 if (isPassed) {\n  561   logger.info('Creating certificate for passed attempt', { attemptId });\n→ 562   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwt1tok0001i2knojxwe10f\",\n            certificateNumber: \"CERT-1754293499700-x627z4t8b\",\n            issuedAt: new Date(\"2025-08-04T07:44:59.700Z\"),\n            expiresAt: new Date(\"2026-08-04T07:44:59.700Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.","level":"error","message":"Complete exam attempt failed","service":"mock-test-api","stack":"PrismaClientValidationError: \nInvalid `prisma.certificate.create()` invocation in\n/home/ahmadi/Desktop/mock/src/services/examService.js:562:48\n\n  559 let certificate = null;\n  560 if (isPassed) {\n  561   logger.info('Creating certificate for passed attempt', { attemptId });\n→ 562   certificate = await prisma.certificate.create({\n          data: {\n            userId: \"cmdw3a9w30003i2jiq5yeaei0\",\n            examId: \"exam_001\",\n            attemptId: \"cmdwt1tok0001i2knojxwe10f\",\n            certificateNumber: \"CERT-1754293499700-x627z4t8b\",\n            issuedAt: new Date(\"2025-08-04T07:44:59.700Z\"),\n            expiresAt: new Date(\"2026-08-04T07:44:59.700Z\"),\n            isActive: true,\n            ~~~~~~~~\n        ?   id?: String,\n        ?   isRevoked?: Boolean,\n        ?   revokedAt?: DateTime | Null,\n        ?   revokedBy?: String | Null,\n        ?   revokedReason?: String | Null,\n        ?   pdfUrl?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime\n          }\n        })\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at _n (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at ri.handleRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:7102)\n    at ri.handleAndLogRequestError (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6784)\n    at ri.request (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:121:6491)\n    at async l (/home/ahmadi/Desktop/mock/node_modules/@prisma/client/runtime/library.js:130:9812)\n    at async ExamService.completeExamAttempt (/home/ahmadi/Desktop/mock/src/services/examService.js:562:23)\n    at async /home/ahmadi/Desktop/mock/src/routes/attempts.js:84:20","timestamp":"2025-08-04 03:44:59","userId":"cmdw3a9w30003i2jiq5yeaei0"}
