
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  profileImage: 'profileImage',
  profilePicture: 'profilePicture',
  address: 'address',
  isActive: 'isActive',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  emailVerificationToken: 'emailVerificationToken',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  lastLoginAt: 'lastLoginAt',
  loginAttempts: 'loginAttempts',
  lockedUntil: 'lockedUntil',
  role: 'role',
  status: 'status',
  departmentId: 'departmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ExamCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  color: 'color',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  type: 'type',
  difficulty: 'difficulty',
  examCategoryId: 'examCategoryId',
  marks: 'marks',
  timeLimit: 'timeLimit',
  isActive: 'isActive',
  isPublic: 'isPublic',
  createdBy: 'createdBy',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  usageCount: 'usageCount',
  correctAnswerRate: 'correctAnswerRate',
  averageTime: 'averageTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionOptionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  text: 'text',
  isCorrect: 'isCorrect',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionImageScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  imageUrl: 'imageUrl',
  altText: 'altText',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionTagScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  tag: 'tag',
  createdAt: 'createdAt'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  examCategoryId: 'examCategoryId',
  duration: 'duration',
  totalMarks: 'totalMarks',
  passingMarks: 'passingMarks',
  price: 'price',
  currency: 'currency',
  isActive: 'isActive',
  isPublic: 'isPublic',
  allowRetakes: 'allowRetakes',
  maxRetakes: 'maxRetakes',
  showResults: 'showResults',
  showAnswers: 'showAnswers',
  randomizeQuestions: 'randomizeQuestions',
  randomizeOptions: 'randomizeOptions',
  questionOverlapPercentage: 'questionOverlapPercentage',
  createdBy: 'createdBy',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  scheduledStart: 'scheduledStart',
  scheduledEnd: 'scheduledEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamQuestionScalarFieldEnum = {
  id: 'id',
  examId: 'examId',
  questionId: 'questionId',
  order: 'order',
  marks: 'marks',
  createdAt: 'createdAt'
};

exports.Prisma.ExamBookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  examId: 'examId',
  bookingDate: 'bookingDate',
  scheduledAt: 'scheduledAt',
  status: 'status',
  paymentId: 'paymentId',
  totalAmount: 'totalAmount',
  currency: 'currency',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  examId: 'examId',
  bookingId: 'bookingId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  status: 'status',
  totalMarks: 'totalMarks',
  obtainedMarks: 'obtainedMarks',
  percentage: 'percentage',
  isPassed: 'isPassed',
  timeSpent: 'timeSpent',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isCheating: 'isCheating',
  cheatingReason: 'cheatingReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionResponseScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  userId: 'userId',
  selectedOptions: 'selectedOptions',
  isCorrect: 'isCorrect',
  marksObtained: 'marksObtained',
  timeSpent: 'timeSpent',
  answeredAt: 'answeredAt',
  submittedAt: 'submittedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScoreScalarFieldEnum = {
  id: 'id',
  responseId: 'responseId',
  questionId: 'questionId',
  attemptId: 'attemptId',
  userId: 'userId',
  isCorrect: 'isCorrect',
  marksObtained: 'marksObtained',
  maxMarks: 'maxMarks',
  accuracy: 'accuracy',
  timeEfficiency: 'timeEfficiency',
  difficultyBonus: 'difficultyBonus',
  penalty: 'penalty',
  responseTime: 'responseTime',
  attemptsCount: 'attemptsCount',
  confidenceLevel: 'confidenceLevel',
  questionDifficulty: 'questionDifficulty',
  scoredAt: 'scoredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamScoreScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  examId: 'examId',
  userId: 'userId',
  totalMarks: 'totalMarks',
  maxMarks: 'maxMarks',
  percentage: 'percentage',
  grade: 'grade',
  correctAnswers: 'correctAnswers',
  wrongAnswers: 'wrongAnswers',
  unanswered: 'unanswered',
  totalQuestions: 'totalQuestions',
  totalTimeSpent: 'totalTimeSpent',
  averageTimePerQuestion: 'averageTimePerQuestion',
  timeEfficiency: 'timeEfficiency',
  easyCorrect: 'easyCorrect',
  easyTotal: 'easyTotal',
  mediumCorrect: 'mediumCorrect',
  mediumTotal: 'mediumTotal',
  hardCorrect: 'hardCorrect',
  hardTotal: 'hardTotal',
  accuracy: 'accuracy',
  speedScore: 'speedScore',
  consistencyScore: 'consistencyScore',
  difficultyScore: 'difficultyScore',
  percentile: 'percentile',
  rank: 'rank',
  improvement: 'improvement',
  calculatedAt: 'calculatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPerformanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  examCategoryId: 'examCategoryId',
  totalAttempts: 'totalAttempts',
  totalPassed: 'totalPassed',
  totalFailed: 'totalFailed',
  passRate: 'passRate',
  averageScore: 'averageScore',
  highestScore: 'highestScore',
  lowestScore: 'lowestScore',
  totalMarks: 'totalMarks',
  totalTimeSpent: 'totalTimeSpent',
  averageTimePerExam: 'averageTimePerExam',
  easyAccuracy: 'easyAccuracy',
  mediumAccuracy: 'mediumAccuracy',
  hardAccuracy: 'hardAccuracy',
  improvementRate: 'improvementRate',
  consistencyScore: 'consistencyScore',
  learningCurve: 'learningCurve',
  lastAttemptAt: 'lastAttemptAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bookingId: 'bookingId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  stripePaymentId: 'stripePaymentId',
  stripeRefundId: 'stripeRefundId',
  description: 'description',
  metadata: 'metadata',
  refundedAt: 'refundedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  examId: 'examId',
  attemptId: 'attemptId',
  certificateNumber: 'certificateNumber',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt',
  isRevoked: 'isRevoked',
  revokedAt: 'revokedAt',
  revokedBy: 'revokedBy',
  revokedReason: 'revokedReason',
  pdfUrl: 'pdfUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.StudyGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isPrivate: 'isPrivate',
  maxMembers: 'maxMembers',
  createdBy: 'createdBy',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudyGroupMemberScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.ExamCategoryUserScalarFieldEnum = {
  id: 'id',
  examCategoryId: 'examCategoryId',
  userId: 'userId',
  accessLevel: 'accessLevel',
  grantedAt: 'grantedAt',
  grantedBy: 'grantedBy'
};

exports.Prisma.ExamStatisticsViewScalarFieldEnum = {
  examId: 'examId',
  examTitle: 'examTitle',
  totalAttempts: 'totalAttempts',
  totalBookings: 'totalBookings',
  totalRevenue: 'totalRevenue',
  averageScore: 'averageScore',
  passRate: 'passRate',
  averageTime: 'averageTime',
  lastAttemptDate: 'lastAttemptDate'
};

exports.Prisma.UserPerformanceViewScalarFieldEnum = {
  userId: 'userId',
  userEmail: 'userEmail',
  totalExamsTaken: 'totalExamsTaken',
  totalExamsPassed: 'totalExamsPassed',
  averageScore: 'averageScore',
  totalTimeSpent: 'totalTimeSpent',
  certificatesEarned: 'certificatesEarned',
  lastExamDate: 'lastExamDate'
};

exports.Prisma.QuestionAnalyticsViewScalarFieldEnum = {
  questionId: 'questionId',
  questionText: 'questionText',
  usageCount: 'usageCount',
  correctAnswerRate: 'correctAnswerRate',
  averageTime: 'averageTime',
  difficulty: 'difficulty',
  examCategoryName: 'examCategoryName'
};

exports.Prisma.RevenueAnalyticsViewScalarFieldEnum = {
  date: 'date',
  totalRevenue: 'totalRevenue',
  totalTransactions: 'totalTransactions',
  averageTransactionValue: 'averageTransactionValue',
  topExamCategory: 'topExamCategory',
  topExam: 'topExam'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  STUDENT: 'STUDENT'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  SINGLE_CHOICE: 'SINGLE_CHOICE',
  TRUE_FALSE: 'TRUE_FALSE',
  FILL_IN_THE_BLANK: 'FILL_IN_THE_BLANK',
  SHORT_ANSWER: 'SHORT_ANSWER',
  ESSAY: 'ESSAY',
  MATCHING: 'MATCHING',
  ORDERING: 'ORDERING'
};

exports.QuestionDifficulty = exports.$Enums.QuestionDifficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD',
  EXPERT: 'EXPERT'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.AttemptStatus = exports.$Enums.AttemptStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  TIMED_OUT: 'TIMED_OUT',
  ABANDONED: 'ABANDONED',
  DISQUALIFIED: 'DISQUALIFIED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  PAYPAL: 'PAYPAL',
  STRIPE: 'STRIPE',
  CASH: 'CASH'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  EXAM_BOOKING: 'EXAM_BOOKING',
  EXAM_REMINDER: 'EXAM_REMINDER',
  EXAM_RESULT: 'EXAM_RESULT',
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  CERTIFICATE_ISSUED: 'CERTIFICATE_ISSUED',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  GENERAL: 'GENERAL'
};

exports.GroupRole = exports.$Enums.GroupRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  READ: 'READ',
  WRITE: 'WRITE',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  ExamCategory: 'ExamCategory',
  Question: 'Question',
  QuestionOption: 'QuestionOption',
  QuestionImage: 'QuestionImage',
  QuestionTag: 'QuestionTag',
  Exam: 'Exam',
  ExamQuestion: 'ExamQuestion',
  ExamBooking: 'ExamBooking',
  ExamAttempt: 'ExamAttempt',
  QuestionResponse: 'QuestionResponse',
  QuestionScore: 'QuestionScore',
  ExamScore: 'ExamScore',
  UserPerformance: 'UserPerformance',
  Payment: 'Payment',
  Certificate: 'Certificate',
  Notification: 'Notification',
  StudyGroup: 'StudyGroup',
  StudyGroupMember: 'StudyGroupMember',
  AuditLog: 'AuditLog',
  ExamCategoryUser: 'ExamCategoryUser',
  ExamStatisticsView: 'ExamStatisticsView',
  UserPerformanceView: 'UserPerformanceView',
  QuestionAnalyticsView: 'QuestionAnalyticsView',
  RevenueAnalyticsView: 'RevenueAnalyticsView'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
